# -*- coding: utf-8 -*-
'''
Created on 08/2013
@author: hmarrao & david
'''

'''
http://www.smecoop.es/dev-graficas
'''

import datetime

vectorConsumosIlumi = ['cCocinaElectrica', 'cHornoElectrico', 'cMicroondas', 'cNevera', 'cCongelador',
                       'cTelevision', 'cMultimedia', 'cLavavajillas', 'cLavadora', 'cSecadora',
                       'cRadiador', 'cOrdenador', 'cCalentadorACS', 'cClima',
                       'cIlumiInvierno', 'cIlumiVerano']

vectorPestanyas = ['USO COCI_ELEC', 'USO HORNO_ELEC', 'USO MICRO', 'USO NEVERA', 'USO CONGELADOR',
                   'USO TELE', 'USO ORDENADOR', 'USO LAVAVAJILLAS', 'USO LAVADORA', 'USO SECADORA',
                   'USO RADIADOR', 'USO AIRE', 'USO CALENTADOR', 'USO OTROS',
                   'USO ILUMI_INV', 'USO ILUMI_VER']

#El consumo representa el consumo medio independientemente de la ocupacion
#KILOWATIOSHORA/DIA
CONSUMOSMEDIOS = { 'cCocinaElectrica' : 0.580628571428571,
                    'cHornoElectrico' : 0.721,
                        'cMicroondas' : 0.0376428571428571,
                            'cNevera' : 1.81,
                        'cCongelador' : 1.54,
                        'cTelevision' : 0.408,
                        'cMultimedia' : 0.929,
                      'cLavavajillas' : 0.693,
                          'cLavadora' : 0.841,
                          'cSecadora' : 0.649,
                          'cRadiador' : 6,
                         'cOrdenador' : 0.375,
                     'cCalentadorACS' : 0.110714285714286,
                             'cClima' : 10,
                     'cIlumiInvierno' : 0.0152170543,
                       'cIlumiVerano' : 0.0107829457 }

#Definimos la estacion como verano o invierno, correspondiente respectivamente a 'oVerano' o 'oInvierno'
#Si la estacion es verano, en el calculo de la caracterizacion energetica no se tendra en cuenta los
#consumos generamos ni por los radiadores, ni por el clima, por lo que no se llamara a dichos metodos
estacion = ''

#Numero de personas contabilizadas para cada perfil de usuario/os
numeroPersonas = { 'UnAdulto' : 1,
                   'UnPensionista' : 1,
#                    'DosAdultos' : 1,
                   'DosAdultos' : 1.7,
                   'DosAdultosConNinyos' : 3.6,
#                    'DosPensionistas' : 2,
                   'DosPensionistas' : 1.5,
                   'DosAdultosYPensionista' : 3,
                   'TresAdultos' : 3,
                   'UnAdultoConNinyos' : 2.8 }

# ocurrenciasIluminacion.items()[1][0]
# 'oVerano'
# ocurrenciasIluminacion.items()[0][0]
# 'oInvierno'
ocurrenciasIluminacion = { 'oVerano'   : [0,0,0,0,0,0,0,0,0,0,0,0,
                                          0,0,0,0,0,0,0,0,1,1,1,1],
                           'oInvierno' : [0,0,0,0,0,0,0,1,1,0,0,0,
                                          0,0,0,0,0,0,1,1,1,1,1,1] }

#Las posiciones del array son las probabilidades de uso de un electrodomestico en las 24 horas del dia
ocurrenciasUnAdulto = { 'oCocinaElectrica' : [0.1005,0,0,0,0,0,0,0,0,0,0,0,
                                              0.041875,0.041875,0.041875,0.041875,0,0,0,0,0.1005,0.1005,0.1005,0.1005],
                         'oHornoElectrico' : [0,0,0,0,0,0,0,0,0,0,0,0,
                                              0.0416666667,0.0416666667,0.0416666667,0,0,0,0,0,0.0625,0.0625,0,0],
#                              'oMicroondas' : [0,0,0,0,0,0,0.011,0.011,0.011,0,0,0,
#                                               0,0.034,0.034,0,0,0,0,0,0.017,0.017,0.017,0.017],
                             'oMicroondas' : [0,0,0,0,0,0,0.0141666667,0.0141666667,0.0141666667,0,0,0,
                                              0,0.0212500000,0.0212500000,0,0,0,0,0,0.0212500000,0.0212500000,0.0212500000,0.0212500000],
                                 'oNevera' : [1,1,1,1,1,1,1,1,1,1,1,1,
                                              1,1,1,1,1,1,1,1,1,1,1,1],
                             'oCongelador' : [1,1,1,1,1,1,1,1,1,1,1,1,
                                              1,1,1,1,1,1,1,1,1,1,1,1],
                             'oTelevision' : [0,0,0,0,0,0,0,0,0,0,0,0,
                                              0,0,0,0,0,0,1,1,1,1,1,1],
                             'oMultimedia' : [0,0,0,0,0,0,0.0666666667,0.0666666667,0.0666666667,0,0,0,
                                              0.0666666667,0.0666666667,0.0666666667,0.0666666667,0.0666666667,0.0666666667,0.0666666667,0.0666666667,0.0666666667,0.0666666667,0.0666666667,0.0666666667],
                           'oLavavajillas' : [0,0,0,0,0,0,0,0,0,0,0,0,
                                              0,0,0,0,0,0,0,0,0.1075000000,0.1075000000,0.1075000000,0.1075000000],
#                                'oLavadora' : [0,0,0,0,0,0,0,0,0,0,0,0,
#                                               0,0,0,0,0,0,0.072,0.072,0.072,0.072,0.072,0.072],
                               'oLavadora' : [0,0,0,0,0,0,0,0,0,0,0,0,
                                              0,0,0,0,0,0,0.0716666667,0.0716666667,0.0716666667,0.0716666667,0.0716666667,0.0716666667],
                               'oSecadora' : [0,0,0,0,0,0,0,0,0,0,0,0,
                                              0,0,0,0,0,0,0,0.086,0.086,0.086,0.086,0.086],
                               'oRadiador' : [0,0,0,0,0,0,0.5555555556,0.5555555556,0.5555555556,0,0,0,
                                              0,0,0,0,0,0,0.5555555556,0.5555555556,0.5555555556,0.5555555556,0.5555555556,0.5555555556],
                              'oOrdenador' : [0,0,0,0,0,0,0,0,0,0,0,0,
                                              0,0,0,0,0,0,0,1,1,1,1,1],
                          'oCalentadorACS' : [0,0,0,0,0,0,0.1428571429,0.1428571429,0.1428571429,0,0,0,
                                              0,0,0,0,0,0,0,0,0.1428571429,0.1428571429,0.1428571429,0.1428571429],
                                  'oClima' : [0,0,0,0,0,0,0,0,0,0,0,0,
                                              0,0,0,0,0,0,0.8333333333,0.8333333333,0.8333333333,0.8333333333,0.8333333333,0.8333333333] }

ocurrenciasUnPensionista = { 'oCocinaElectrica' : [0,0,0,0,0,0,0,0.08375,0.08375,0,0,0,
                                                   0.0628125,0.0628125,0.0628125,0.0628125,0,0,0,0,0.0628125,0.0628125,0.0628125,0.0628125],
                              'oHornoElectrico' : [0,0,0,0,0,0,0,0,0,0,0,0,
                                                   0.031,0.031,0.031,0.031,0,0,0,0,0.031,0.031,0.031,0.031],
#                                 'oMicroondas' : [0,0,0,0,0,0,0.011,0.011,0.011,0,0,0,
#                                                  0.023,0.023,0.023,0,0,0,0,0.0136,0.0136,0.0136,0.0136,0.0136],
                                'oMicroondas' : [0,0,0,0,0,0,0.0141666667,0.0141666667,0.0141666667,0,0,0,
                                                 0.0159375000,0.0159375000,0.0159375000,0,0,0,0,0.0159375000,0.0159375000,0.0159375000,0.0159375000,0.0159375000],
                                      'oNevera' : [1,1,1,1,1,1,1,1,1,1,1,1,
                                                   1,1,1,1,1,1,1,1,1,1,1,1],
                                  'oCongelador' : [1,1,1,1,1,1,1,1,1,1,1,1,
                                                   1,1,1,1,1,1,1,1,1,1,1,1],
#                                   'oTelevision' : [0,0,0,0,0,0,0,0,0,0,0.4285714286,0.4285714286,
#                                                    0.4285714286,0.4285714286,0.4285714286,0.4285714286,0.4285714286,0.4285714286,0.4285714286,0.4285714286,0.4285714286,0.4285714286,0.4285714286,0],
                                  'oTelevision' : [0,0,0,0,0,0,0,0,0,0,0.4285714286,0.4285714286,
                                                   0.4285714286,0.4285714286,0.4285714286,0.4285714286,0.4285714286,0.4285714286,0.4285714286,0.4285714286,0.4285714286,0.4285714286,0.4285714286,0.4285714286],
#                                   'oMultimedia' : [0,0,0,0,0,0,0,0.0588235294,0.0588235294,0.0588235294,0.0588235294,0.0588235294,
#                                                    0.0588235294,0.0588235294,0.0588235294,0.0588235294,0.0588235294,0.0588235294,0.0588235294,0.0588235294,0.0588235294,0.0588235294,0.0588235294,0.0588235294],
                                  'oMultimedia' : [0,0,0,0,0,0,0.0555555556,0.0555555556,0.0555555556,0.0555555556,0.0555555556,0.0555555556,
                                                   0.0555555556,0.0555555556,0.0555555556,0.0555555556,0.0555555556,0.0555555556,0.0555555556,0.0555555556,0.0555555556,0.0555555556,0.0555555556,0.0555555556],
#                                 'oLavavajillas' : [0,0,0,0,0,0,0,0,0,0,0,0,
#                                                    0,0,0.0614285714,0.0614285714,0,0,0,0.0614285714,0.0614285714,0.0614285714,0.0614285714,0.0614285714],
                                'oLavavajillas' : [0,0,0,0,0,0,0,0,0,0,0,0,
                                                   0,0,0,0.0614285714,0.0614285714,0,0,0.0614285714,0.0614285714,0.0614285714,0.0614285714,0.0614285714],
#                                     'oLavadora' : [0,0,0,0,0,0,0,0,0,0,0,0,
#                                                    0.043,0.043,0.043,0.043,0.043,0.043,0.043,0.043,0.043,0.043,0,0],
                                    'oLavadora' : [0,0,0,0,0,0,0,0,0,0,0,0,
                                                   0,0.0430000000,0.0430000000,0.0430000000,0.0430000000,0.0430000000,0.0430000000,0.0430000000,0.0430000000,0.0430000000,0.0430000000,0],
#                                     'oSecadora' : [0,0,0,0,0,0,0,0,0,0,0,0,
#                                                    0,0.048,0.048,0.048,0.048,0.048,0.048,0.048,0.048,0.048,0,0],
                                    'oSecadora' : [0,0,0,0,0,0,0,0,0,0,0,0,
                                                   0,0,0.0477777778,0.0477777778,0.0477777778,0.0477777778,0.0477777778,0.0477777778,0.0477777778,0.0477777778,0.0477777778,0],
#                                     'oRadiador' : [0,0,0,0,0,0,0.4166666667,0.4166666667,0.4166666667,0,0,0.4166666667,
#                                                    0.4166666667,0.4166666667,0.4166666667,0.4166666667,0.4166666667,0.4166666667,0,0,0.4166666667,0.4166666667,0,0],
                                    'oRadiador' : [0,0,0,0,0,0,0,0.4166666667,0.4166666667,0.4166666667,0,0,
                                                   0.4166666667,0.4166666667,0.4166666667,0.4166666667,0.4166666667,0.4166666667,0.4166666667,0,0,0.4166666667,0.4166666667,0],
#                                    'oOrdenador' : [0,0,0,0,0,0,0,0,0,0,0,0,
#                                                    0,0,0.5,0.5,0,0,0.25,0.25,0.25,0.25,0,0],
                                   'oOrdenador' : [0,0,0,0,0,0,0,0,0,0,0,0,
                                                   0,0,0,0.5,0.5,0,0,0.25,0.25,0.25,0.25,0],
#                                'oCalentadorACS' : [0,0,0,0,0,0.1428571429,0.1428571429,0.1428571429,0,0,0,0,
#                                                    0,0,0,0,0,0,0,0.1428571429,0.1428571429,0.1428571429,0.1428571429,0],
                               'oCalentadorACS' : [0,0,0,0,0,0,0.1428571429,0.1428571429,0.1428571429,0,0,0,
                                                   0,0,0,0,0,0,0,0,0.1428571429,0.1428571429,0.1428571429,0.1428571429],
#                                        'oClima' : [0,0,0,0,0,0,0,0,0,0.3846153846,0.3846153846,0.3846153846,
#                                                    0.3846153846,0.3846153846,0.3846153846,0.3846153846,0.3846153846,0.3846153846,0.3846153846,0.3846153846,0.3846153846,0.3846153846,0,0] }
                                       'oClima' : [0,0,0,0,0,0,0,0,0,0,0.3846153846,0.3846153846,
                                                   0.3846153846,0.3846153846,0.3846153846,0.3846153846,0.3846153846,0.3846153846,0.3846153846,0.3846153846,0.3846153846,0.3846153846,0.3846153846,0] }

ocurrenciasDosAdultos = { 'oCocinaElectrica' : [0.067,0,0,0,0,0,0,0,0,0,0,0,
                                                0.08375,0.08375,0.08375,0.08375,0,0,0,0,0.067,0.067,0.067,0.067],
                           'oHornoElectrico' : [0,0,0,0,0,0,0,0,0,0,0,0,
                                                0,0.0625,0.0625,0,0,0,0,0,0.0625,0.0625,0,0],
#                                'oMicroondas' : [0,0,0,0,0,0,0,0.0141666667,0.0141666667,0.0141666667,0,0,
#                                                 0,0.0182142857,0.0182142857,0.0182142857,0,0,0,0,0.0182142857,0.0182142857,0.0182142857,0.0182142857],
#                                'oMicroondas' : [0,0,0,0,0,0,0.0141666667,0.0141666667,0.0141666667,0,0,0,
#                                                 0,0.0212500000,0.0182142857,0,0,0,0,0,0.0212500000,0.0212500000,0.0212500000,0.0212500000],
                               'oMicroondas' : [0,0,0,0,0,0,0.0141666667,0.0141666667,0.0141666667,0,0,0,
                                                0,0.0212500000,0.0212500000,0,0,0,0,0,0.0212500000,0.0212500000,0.0212500000,0.0212500000],
                                   'oNevera' : [1,1,1,1,1,1,1,1,1,1,1,1,
                                                1,1,1,1,1,1,1,1,1,1,1,1],
                               'oCongelador' : [1,1,1,1,1,1,1,1,1,1,1,1,
                                                1,1,1,1,1,1,1,1,1,1,1,1],
#                                'oTelevision' : [0,0,0,0,0,0,0,0,0,0,0,0,
#                                                 0,0.3333,0.333,0.3333,0,0,0.5,0.5,1,1,1,1],
                               'oTelevision' : [0,0,0,0,0,0,0,0,0,0,0,0,
                                                0,0.3333333333,0.3333333333,0.3333333333,0,0,0.5,0.5,1,1,1,1],
                               'oMultimedia' : [0,0,0,0,0,0,0.0666666667,0.0666666667,0.0666666667,0,0,0,
                                                0.0666666667,0.0666666667,0.0666666667,0.0666666667,0.0666666667,0.0666666667,0.0666666667,0.0666666667,0.0666666667,0.0666666667,0.0666666667,0.0666666667],
                             'oLavavajillas' : [0,0,0,0,0,0,0,0,0,0,0,0,
                                                0,0,0,0,0,0,0,0,0.1075000000,0.1075000000,0.1075000000,0.1075000000],
                                 'oLavadora' : [0,0,0,0,0,0,0,0,0,0,0,0,
                                                0,0,0,0,0,0,0.0716,0.0716,0.0716,0.0716,0.0716,0.0716],
                                 'oSecadora' : [0,0,0,0,0,0,0,0,0,0,0,0,
                                                0,0,0,0,0,0,0,0.086,0.086,0.086,0.086,0.086],
                                 'oRadiador' : [0,0,0,0,0,0,0.5555555556,0.5555555556,0.5555555556,0,0,0,
                                                0,0,0,0,0,0,0.5555555556,0.5555555556,0.5555555556,0.5555555556,0.5555555556,0.5555555556],
                                'oOrdenador' : [0,0,0,0,0,0,0,0,0,0,0,0,
                                                0,0,0,0,0,0,0,1,1,1,1,1],
                            'oCalentadorACS' : [0,0,0,0,0,0,0.1428571429,0.1428571429,0.1428571429,0,0,0,
                                                0,0,0,0,0,0,0,0,0.1428571429,0.1428571429,0.1428571429,0.1428571429],
                                    'oClima' : [0,0,0,0,0,0,0,0,0,0,0,0,
                                                0,0,0,0,0,0,0.8333333333,0.8333333333,0.8333333333,0.8333333333,0.8333333333,0.8333333333] }

# ocurrenciasDosAdultosConNinyos = { 'oCocinaElectrica' : [0.087,0,0,0,0,0,0,0.04,0,0,0,0,
#                                                          0.10875,0.10875,0.10875,0.10875,0,0,0,0,0.087,0.087,0.087,0.087],
ocurrenciasDosAdultosConNinyos = { 'oCocinaElectrica' : [0.087,0,0,0,0,0,0,0,0,0,0,0,
                                                         0.10875,0.10875,0.10875,0.10875,0,0,0,0,0.087,0.087,0.087,0.087],
                                    'oHornoElectrico' : [0,0,0,0,0,0,0,0,0,0,0,0,
                                                         0.041,0.041,0.041,0,0,0,0,0.041,0.041,0.041,0,0],
                                        'oMicroondas' : [0,0,0,0,0,0,0.0166666667,0.0166666667,0.0166666667,0,0,
                                                         0,0.0187500000,0.0187500000,0.0187500000,0,0,0,0,0.0187500000,0.0187500000,0.0187500000,0.0187500000,0.0187500000],
                                            'oNevera' : [1,1,1,1,1,1,1,1,1,1,1,1,
                                                         1,1,1,1,1,1,1,1,1,1,1,1],
                                        'oCongelador' : [1,1,1,1,1,1,1,1,1,1,1,1,
                                                         1,1,1,1,1,1,1,1,1,1,1,1],
#                                         'oTelevision' : [0,0,0,0,0,0,0,0,0,0,0,0,
#                                                          0,0.3333,0.333,0.3333,0,0,0.5,0.5,1,1,1,1],
                                        'oTelevision' : [0,0,0,0,0,0,0,0,0,0,0,0,
                                                         0,0.3333333333,0.3333333333,0.3333333333,0,0,0.5,0.5,1,1,1,1],
                                        'oMultimedia' : [0,0,0,0,0,0,0.1,0.1,0.1,0,0,0,
                                                         0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1],
#                                       'oLavavajillas' : [0,0,0,0,0,0,0,0,0,0,0,0,
#                                                          0,0,0.09,0.09,0.09,0,0,0,0.09,0.09,0.09,0.09],
                                      'oLavavajillas' : [0,0,0,0,0,0,0,0,0,0,0,0,
                                                         0,0,0.0900000000,0.0900000000,0.0900000000,0,0,0,0.0900000000,0.0900000000,0.0900000000,0.0900000000],
                                          'oLavadora' : [0,0,0,0,0,0,0,0,0,0,0,0,
                                                         0,0.0730000000,0.0730000000,0.0730000000,0.0730000000,0.0730000000,0.0730000000,0.0730000000,0.0730000000,0.0730000000,0.0730000000,0],
                                          'oSecadora' : [0,0,0,0,0,0,0,0,0,0,0,0,
                                                         0,0,0.0811111111,0.0811111111,0.0811111111,0.0811111111,0.0811111111,0.0811111111,0.0811111111,0.0811111111,0.0811111111,0],
                                          'oRadiador' : [0,0,0,0,0,0,0.3571428571,0.3571428571,0.3571428571,0,0,0,
                                                         0,0.3571428571,0.3571428571,0.3571428571,0.3571428571,0.3571428571,0.3571428571,0.3571428571,0.3571428571,0.3571428571,0.3571428571,0.3571428571],
                                         'oOrdenador' : [0,0,0,0,0,0,0,0,0.4375,0.4375,0,0,
                                                         0,0,0,0.4375,0.4375,0,0.875,0.875,0.875,0.875,0.875,0.875],
                                     'oCalentadorACS' : [0,0,0,0,0,0,0.2142857143,0.2142857143,0.2142857143,0,0,0,
                                                         0,0,0,0,0,0,0,0,0.2142857143,0.2142857143,0.2142857143,0.2142857143],
                                             'oClima' : [0,0,0,0,0,0,0,0,0,0,0,0,
                                                         0.4545454545,0.4545454545,0.4545454545,0.4545454545,0.4545454545,0.4545454545,0.4545454545,0.4545454545,0.4545454545,0.4545454545,0.4545454545,0] }

# ocurrenciasDosPensionistas = { 'oCocinaElectrica' : [0,0,0,0,0,0,0,0,0.084,0.084,0,0,
#                                                      0,0.063,0.063,0.063,0.063,0,0,0,0,0.063,0.063,0.063],
ocurrenciasDosPensionistas = { 'oCocinaElectrica' : [0,0,0,0,0,0,0,0,0.0837500000,0.0837500000,0,0,
                                                     0,0.0628125000,0.0628125000,0.0628125000,0.0628125000,0,0,0,0.0628125000,0.0628125000,0.0628125000,0.0628125000],
                                'oHornoElectrico' : [0,0,0,0,0,0,0,0,0,0,0,0,
                                                     0.031,0.031,0.031,0.031,0,0,0,0,0.031,0.031,0.031,0.031],
#                                     'oMicroondas' : [0,0,0,0,0,0,0,0.014,0.014,0.014,0,0,
#                                                      0,0.018,0.018,0.018,0,0,0,0,0.018,0.018,0.018,0.018],
                                    'oMicroondas' : [0,0,0,0,0,0,0.0141666667,0.0141666667,0.0141666667,0,0,0,
                                                     0.0159375000,0.0159375000,0.0159375000,0,0,0,0,0.0159375000,0.0159375000,0.0159375000,0.0159375000,0.0159375000],
                                        'oNevera' : [1,1,1,1,1,1,1,1,1,1,1,1,
                                                     1,1,1,1,1,1,1,1,1,1,1,1],
                                    'oCongelador' : [1,1,1,1,1,1,1,1,1,1,1,1,
                                                     1,1,1,1,1,1,1,1,1,1,1,1],
#                                     'oTelevision' : [0,0,0,0,0,0,0,0,0,0,0.429,0.429,
#                                                      0.429,0.429,0.429,0.429,0.429,0.429,0.429,0.429,0.429,0.429,0.429,0.429],
                                    'oTelevision' : [0,0,0,0,0,0,0,0,0,0,0.4285714286,0.4285714286,
                                                     0.4285714286,0.4285714286,0.4285714286,0.4285714286,0.4285714286,0.4285714286,0.4285714286,0.4285714286,0.4285714286,0.4285714286,0.4285714286,0.4285714286],
#                                     'oMultimedia' : [0,0,0,0,0,0,0,0.059,0.059,0.059,0.059,0.059,
#                                                      0.059,0.059,0.059,0.059,0.059,0.059,0.059,0.059,0.059,0.059,0.059,0.059],
                                  'oMultimedia' : [0,0,0,0,0,0,0.0555555556,0.0555555556,0.0555555556,0.0555555556,0.0555555556,0.0555555556,
                                                   0.0555555556,0.0555555556,0.0555555556,0.0555555556,0.0555555556,0.0555555556,0.0555555556,0.0555555556,0.0555555556,0.0555555556,0.0555555556,0.0555555556],
#                                   'oLavavajillas' : [0,0,0,0,0,0,0,0,0,0,0,0,
#                                                      0,0,0.061,0.061,0.061,0,0,0,0.061,0.061,0.061,0.061],
                                  'oLavavajillas' : [0,0,0,0,0,0,0,0,0,0,0,0,
                                                     0,0,0.0614285714,0.0614285714,0.0614285714,0,0,0,0.0614285714,0.0614285714,0.0614285714,0.0614285714],
                                      'oLavadora' : [0,0,0,0,0,0,0,0,0,0,0,0,
                                                     0,0.043,0.043,0.043,0.043,0.043,0.043,0.043,0.043,0.043,0.043,0],
#                                       'oSecadora' : [0,0,0,0,0,0,0,0,0,0,0,0,
#                                                      0,0,0.048,0.048,0.048,0.048,0.048,0.048,0.048,0.048,0.048,0],
                                      'oSecadora' : [0,0,0,0,0,0,0,0,0,0,0,0,
                                                     0,0,0.0477777778,0.0477777778,0.0477777778,0.0477777778,0.0477777778,0.0477777778,0.0477777778,0.0477777778,0.0477777778,0],
#                                       'oRadiador' : [0,0,0,0,0,0,0,0.417,0.417,0.417,0,0,
#                                                      0.417,0.417,0.417,0.417,0.417,0.417,0.417,0,0,0.417,0.417,0],
                                    'oRadiador' : [0,0,0,0,0,0,0,0.4166666667,0.4166666667,0.4166666667,0,0,
                                                   0.4166666667,0.4166666667,0.4166666667,0.4166666667,0.4166666667,0.4166666667,0.4166666667,0,0,0.4166666667,0.4166666667,0],
                                     'oOrdenador' : [0,0,0,0,0,0,0,0,0,0,0,0,
                                                     0,0,0,0.500,0.500,0,0,0.250,0.250,0.250,0.250,0],
#                                  'oCalentadorACS' : [0,0,0,0,0,0,0.143,0.143,0.143,0,0,0,
#                                                      0,0,0,0,0,0,0,0,0.143,0.143,0.143,0.143],
                                 'oCalentadorACS' : [0,0,0,0,0,0,0.1428571429,0.1428571429,0.1428571429,0,0,0,
                                                     0,0,0,0,0,0,0,0,0.1428571429,0.1428571429,0.1428571429,0.1428571429],
                                         'oClima' : [0,0,0,0,0,0,0,0,0,0,0.3846153846,0.3846153846,
                                                     0.3846153846,0.3846153846,0.3846153846,0.3846153846,0.3846153846,0.3846153846,0.3846153846,0.3846153846,0.3846153846,0.385,0.385,0] }

ocurrenciasDosAdultosYPensionista = { 'oCocinaElectrica' : [0.0628125000,0,0,0,0,0,0,0,0.08375,0.08375,0,0,
                                                            0,0.0628125,0.0628125,0.0628125,0.0628125,0,0,0,0,0.0628125,0.0628125,0.0628125],
                                       'oHornoElectrico' : [0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0.031,0.031,0.031,0.031,0,0,0,0,0.031,0.031,0.031,0.031],
#                                            'oMicroondas' : [0,0,0,0,0,0,0,0.0166666667,0.0166666667,0.0166666667,0,0,
#                                                             0,0.0214285714,0.0214285714,0.0214285714,0,0,0,0,0.0214285714,0.0214285714,0.0214285714,0.0214285714],
                                           'oMicroondas' : [0,0,0,0,0,0,0,0.0166666667,0.0166666667,0.0166666667,0,0,
                                                            0.0187500000,0.0187500000,0.0187500000,0,0,0,0,0.0187500000,0.0187500000,0.0187500000,0.0187500000,0.0187500000],
                                               'oNevera' : [1,1,1,1,1,1,1,1,1,1,1,1,
                                                            1,1,1,1,1,1,1,1,1,1,1,1],
                                           'oCongelador' : [1,1,1,1,1,1,1,1,1,1,1,1,
                                                            1,1,1,1,1,1,1,1,1,1,1,1],
                                           'oTelevision' : [0,0,0,0,0,0,0,0,0,0,0.4285714286,0.4285714286,
                                                            0.4285714286,0.4285714286,0.4285714286,0.4285714286,0.4285714286,0.4285714286,0.4285714286,0.4285714286,0.4285714286,0.4285714286,0.4285714286,0.4285714286],
#                                            'oMultimedia' : [0,0,0,0,0,0,0,0.0882352941,0.0882352941,0.0882352941,0.0882352941,0.0882352941,
#                                                             0.0882352941,0.0882352941,0.0882352941,0.0882352941,0.0882352941,0.0882352941,0.0882352941,0.0882352941,0.0882352941,0.0882352941,0.0882352941,0.0882352941],
                                            'oMultimedia' : [0,0,0,0,0,0,0.0833333333,0.0833333333,0.0833333333,0.0833333333,0.0833333333,0.0833333333,
                                                             0.0833333333,0.0833333333,0.0833333333,0.0833333333,0.0833333333,0.0833333333,0.0833333333,0.0833333333,0.0833333333,0.0833333333,0.0833333333,0.0833333333],
                                         'oLavavajillas' : [0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0.0757142857,0.0757142857,0.0757142857,0,0,0,0.0757142857,0.0757142857,0.0757142857,0.0757142857],
                                             'oLavadora' : [0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0.053,0.053,0.053,0.053,0.053,0.053,0.053,0.053,0.053,0.053,0],
#                                              'oSecadora' : [0,0,0,0,0,0,0,0,0,0,0,0,
#                                                             0,0,0.053,0.053,0.053,0.053,0.053,0.053,0.053,0.053,0.053,0.053],
                                             'oSecadora' : [0,0,0,0,0,0,0,0,0,0,0,0,
                                                            0,0,0.0588888889,0.0588888889,0.0588888889,0.0588888889,0.0588888889,0.0588888889,0.0588888889,0.0588888889,0.0588888889,0],
                                             'oRadiador' : [0,0,0,0,0,0,0,0.4166666667,0.4166666667,0.4166666667,0,0,
                                                            0.4166666667,0.4166666667,0.4166666667,0.4166666667,0.4166666667,0.4166666667,0.4166666667,0,0,0.4166666667,0.4166666667,0],
                                            'oOrdenador' : [0,0,0,0,0,0,0,0,0.375,0.375,0,0,
                                                            0,0,0,0.375,0.375,0,0,0.9,0.9,0.9,0.9,0.9],
                                        'oCalentadorACS' : [0,0,0,0,0,0,0.2142857143,0.2142857143,0.2142857143,0,0,0,
                                                            0,0,0,0,0,0,0,0,0.2142857143,0.2142857143,0.2142857143,0.2142857143],
                                                'oClima' : [0,0,0,0,0,0,0,0,0,0,0.3846153846,0.3846153846,
                                                            0.3846153846,0.3846153846,0.3846153846,0.3846153846,0.3846153846,0.3846153846,0.3846153846,0.3846153846,0.3846153846,0.3846153846,0.3846153846,0] }

ocurrenciasTresAdultos = { 'oCocinaElectrica' : [0.087,0,0,0,0,0,0,0,0,0,0,0,
                                                 0.10875,0.10875,0.10875,0.10875,0,0,0,0,0.087,0.087,0.087,0.087],
#                             'oHornoElectrico' : [0,0,0,0,0,0,0,0,0,0,0,0,
#                                                  0.041,0.041,0.041,0,0,0,0,0.041,0.041,0.041,0,0],
                            'oHornoElectrico' : [0,0,0,0,0,0,0,0,0,0,0,0,
                                                 0.0583333333,0.0583333333,0.0583333333,0,0,0,0,0.0583333333,0.0583333333,0.0583333333,0,0],
#                                 'oMicroondas' : [0,0,0,0,0,0,0,0.0166666667,0.0166666667,0.0166666667,0,0,
#                                                  0,0.021428571428571,0.021428571428571,0.021428571428571,0,0,0,0,0.021428571428571,0.021428571428571,0.021428571428571,0.021428571428571],
                                  'oMicroondas' : [0,0,0,0,0,0,0,0.0166666667,0.0166666667,0.0166666667,0,0,
                                                   0.0187500000,0.0187500000,0.0187500000,0,0,0,0,0.0187500000,0.0187500000,0.0187500000,0.0187500000,0.0187500000],
                                    'oNevera' : [1,1,1,1,1,1,1,1,1,1,1,1,
                                                 1,1,1,1,1,1,1,1,1,1,1,1],
                                'oCongelador' : [1,1,1,1,1,1,1,1,1,1,1,1,
                                                 1,1,1,1,1,1,1,1,1,1,1,1],
#                                 'oTelevision' : [0,0,0,0,0,0,0,0,0,0,0,0,
#                                                  0,0.3333,0.333,0.3333,0,0,0.5,0.5,1,1,1,1],
                                  'oTelevision' : [0,0,0,0,0,0,0,0,0,0,0,0,
                                                   0,0.3333333333,0.3333333333,0.3333333333,0,0,0.5,0.5,1,1,1,1],
                                'oMultimedia' : [0,0,0,0,0,0,0.1,0.1,0.1,0,0,0,
                                                 0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1],
#                               'oLavavajillas' : [0,0,0,0,0,0,0,0,0,0,0,0,
#                                                  0,0,0,0,0,0,0,0,0.1075,0.1075,0.1075,0.1075],
                              'oLavavajillas' : [0,0,0,0,0,0,0,0,0,0,0,0,
                                                 0,0,0,0,0,0,0,0,0.1575000000,0.1575000000,0.1575000000,0.1575000000],
#                                   'oLavadora' : [0,0,0,0,0,0,0,0,0,0,0,0,
#                                                  0,0,0,0,0,0,0.0716,0.0716,0.0716,0.0716,0.0716,0.0716],
                                  'oLavadora' : [0,0,0,0,0,0,0,0,0,0,0,0,
                                                 0,0,0,0,0,0,0.1050000000,0.1050000000,0.1050000000,0.1050000000,0.1050000000,0.1050000000],
#                                   'oSecadora' : [0,0,0,0,0,0,0,0,0,0,0,0,
#                                                  0,0,0,0,0,0,0,0.086,0.086,0.086,0.086,0.086],
                                  'oSecadora' : [0,0,0,0,0,0,0,0,0,0,0,0,
                                                 0,0,0,0,0,0,0,0.1260000000,0.1260000000,0.1260000000,0.1260000000,0.1260000000],
                                  'oRadiador' : [0,0,0,0,0,0,0.5555555556,0.5555555556,0.5555555556,0,0,0,
                                                 0,0,0,0,0,0,0.5555555556,0.5555555556,0.5555555556,0.5555555556,0.5555555556,0.5555555556],
                                 'oOrdenador' : [0,0,0,0,0,0,0.4444444444,0.4444444444,0.4444444444,0.4444444444,0.4444444444,0.4444444444,
                                                 0.4444444444,0.4444444444,0.4444444444,0.4444444444,0.4444444444,0.4444444444,0.4444444444,0.4444444444,0.4444444444,0.4444444444,0.4444444444,0.4444444444],
                             'oCalentadorACS' : [0,0,0,0,0,0,0.2142857143,0.2142857143,0.2142857143,0,0,0,
                                                 0,0,0,0,0,0,0,0,0.2142857143,0.2142857143,0.2142857143,0.2142857143],
                                     'oClima' : [0,0,0,0,0,0,0,0,0,0,0,0,
                                                 0.4545454545,0.4545454545,0.4545454545,0.4545454545,0.4545454545,0.4545454545,0.4545454545,0.4545454545,0.4545454545,0.4545454545,0.4545454545,0] }

ocurrenciasUnAdultoConNinyos = { 'oCocinaElectrica' : [0.087,0,0,0,0,0,0,0,0,0,0,0,
                                                       0.10875,0.10875,0.10875,0.10875,0,0,0,0,0.087,0.087,0.087,0.087],
                                  'oHornoElectrico' : [0,0,0,0,0,0,0,0,0,0,0,0,
                                                       0.041,0.041,0.041,0,0,0,0,0.041,0.041,0.041,0,0],
#                                       'oMicroondas' : [0,0,0,0,0,0,0,0.0166666667,0.0166666667,0.0166666667,0,0,
#                                                        0,0.0214285714,0.0214285714,0.0214285714,0,0,0,0,0.0214285714,0.0214285714,0.0214285714,0.0214285714],
                                      'oMicroondas' : [0,0,0,0,0,0,0,0.0166666667,0.0166666667,0.0166666667,0,0,
                                                       0.0187500000,0.0187500000,0.0187500000,0,0,0,0,0.0187500000,0.0187500000,0.0187500000,0.0187500000,0.0187500000],
                                          'oNevera' : [1,1,1,1,1,1,1,1,1,1,1,1,
                                                       1,1,1,1,1,1,1,1,1,1,1,1],
                                      'oCongelador' : [1,1,1,1,1,1,1,1,1,1,1,1,
                                                       1,1,1,1,1,1,1,1,1,1,1,1],
#                                       'oTelevision' : [0,0,0,0,0,0,0,0,0,0,0,0,
#                                                        0,0.3333,0.333,0.3333,0,0,0.5,0.5,1,1,1,1],
                                      'oTelevision' : [0,0,0,0,0,0,0,0,0,0,0,0,
                                                       0,0.3333333333,0.3333333333,0.3333333333,0,0,0.5,0.5,1,1,1,1],
                                      'oMultimedia' : [0,0,0,0,0,0,0.0666666667,0.0666666667,0.0666666667,0,0,0,
                                                       0.0666666667,0.0666666667,0.0666666667,0.0666666667,0.0666666667,0.0666666667,0.0666666667,0.0666666667,0.0666666667,0.0666666667,0.0666666667,0.0666666667],
#                                     'oLavavajillas' : [0,0,0,0,0,0,0,0,0,0,0,0,
#                                                        0,0.073,0.073,0.073,0.073,0.073,0.073,0.073,0.073,0.073,0.073,0.073],
                                    'oLavavajillas' : [0,0,0,0,0,0,0,0,0,0,0,0,
                                                       0,0,0.0900000000,0.0900000000,0.0900000000,0,0,0,0.0900000000,0.0900000000,0.0900000000,0.0900000000],
                                        'oLavadora' : [0,0,0,0,0,0,0,0,0,0,0,0,
                                                       0,0.063,0.063,0.063,0.063,0.063,0.063,0.063,0.063,0.063,0.063,0],
#                                         'oSecadora' : [0,0,0,0,0,0,0,0,0,0,0,0,
#                                                        0,0,0.063,0.063,0.063,0.063,0.063,0.063,0.063,0.063,0.063,0.063],
                                        'oSecadora' : [0,0,0,0,0,0,0,0,0,0,0,0,
                                                       0,0,0.0700000000,0.0700000000,0.0700000000,0.0700000000,0.0700000000,0.0700000000,0.0700000000,0.0700000000,0.0700000000,0],
                                        'oRadiador' : [0,0,0,0,0,0,0.3571428571,0.3571428571,0.3571428571,0,0,0,
                                                       0,0.3571428571,0.3571428571,0.3571428571,0.3571428571,0.3571428571,0.3571428571,0.3571428571,0.3571428571,0.3571428571,0.3571428571,0.3571428571],
                                       'oOrdenador' : [0,0,0,0,0,0,0,0,0.4375,0.4375,0,0,
                                                       0,0,0,0.4375,0.4375,0,0.875,0.875,0.875,0.875,0.875,0.875],
                                   'oCalentadorACS' : [0,0,0,0,0,0,0.2142857143,0.2142857143,0.2142857143,0,0,0,
                                                       0,0,0,0,0,0,0,0,0.2142857143,0.2142857143,0.2142857143,0.2142857143],
                                           'oClima' : [0,0,0,0,0,0,0,0,0,0,0,0,
                                                       0.4545454545,0.4545454545,0.4545454545,0.4545454545,0.4545454545,0.4545454545,0.4545454545,0.4545454545,0.4545454545,0.4545454545,0.4545454545,0] }

#tiempos = sumarElementosVector(ocurrencias)
tiempos = { 'tCocinaElectrica' : None,
            'tHornoElectrico' : None,
            'tMicroondas' : None,
            'tNevera' : None,
            'tCongelador' : None,
            'tTelevision' : None,
            'tMultimedia' : None,
            'tLavavajillas' : None,
            'tLavadora' : None,
            'tSecadora' : None,
            'tRadiador' : None,
            'tOrdenador' : None,
            'tCalentadorACS' : None,
            'tClima' : None }

#potencias = consumosMedios / sumarElementosVector(ocurrencias)
potencias = { 'pCocinaElectrica' : None,
              'pHornoElectrico' : None,
              'pMicroondas' : None,
              'pNevera' : None,
              'pCongelador' : None,
              'pTelevision' : None,
              'pMultimedia' : None,
              'pLavavajillas' : None,
              'pLavadora' : None,
              'pSecadora' : None,
              'pRadiador' : None,
              'pOrdenador' : None,
              'pCalentadorACS' : None,
              'pClima' : None }

VECTOR_NULO = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

vectorPuntosLuz = [9, 9, 11, 17, 13, 16, 17, 17]

vectorPerfiles = [ocurrenciasUnAdulto, ocurrenciasUnPensionista, ocurrenciasDosAdultos,
                  ocurrenciasDosAdultosConNinyos, ocurrenciasDosPensionistas, ocurrenciasDosAdultosYPensionista,
                  ocurrenciasTresAdultos, ocurrenciasUnAdultoConNinyos]

vectorElectro = ['oCocinaElectrica', 'oHornoElectrico', 'oMicroondas', 'oNevera', 'oCongelador',
                 'oTelevision', 'oMultimedia', 'oLavavajillas', 'oLavadora', 'oSecadora',
                 'oRadiador', 'oOrdenador', 'oCalentadorACS', 'oClima']

vectorConsumos = ['cCocinaElectrica', 'cHornoElectrico', 'cMicroondas', 'cNevera', 'cCongelador',
                  'cTelevision', 'cMultimedia', 'cLavavajillas', 'cLavadora', 'cSecadora',
                  'cRadiador', 'cOrdenador', 'cCalentadorACS', 'cClima']

vectorTiempos = ['tCocinaElectrica', 'tHornoElectrico', 'tMicroondas', 'tNevera', 'tCongelador',
                 'tTelevision', 'tMultimedia', 'tLavavajillas', 'tLavadora', 'tSecadora',
                 'tRadiador', 'tOrdenador', 'tCalentadorACS', 'tClima']

vectorPotencias = ['pCocinaElectrica', 'pHornoElectrico', 'pMicroondas', 'pNevera', 'pCongelador',
                   'pTelevision', 'pMultimedia', 'pLavavajillas', 'pLavadora', 'pSecadora',
                   'pRadiador', 'pOrdenador', 'pCalentadorACS', 'pClima']

vectorPersonas = ['UnAdulto', 'UnPensionista', 'DosAdultos',
                  'DosAdultosConNinyos', 'DosPensionistas', 'DosAdultosYPensionista',
                  'TresAdultos', 'UnAdultoConNinyos']


def _add(x, y):
    '''
    Suma dos vectores x,y
    '''
    vectorSuma = x + y
    return vectorSuma


def sumarElementosVector(array):

    '''
    Devuelve la suma de todos los elementos de un vector de 24 posiciones (de 0 a 23)
    '''
    suma = 0
    for elemento in array:
        suma += elemento
    return suma


def multiplicarDiccionarioPorNumero(vectorPerfilesF, vectorElectroF, consumoF):
    '''
    Multiplica un numero por cada elemento de una lista (dentro de un diccionario)
    '''
    #print vectorPerfilesF[vectorElectroF]
    vectorMulti = []
    k = 0
    for valor in vectorPerfilesF[vectorElectroF]:
        vectorMulti.append(consumoF * vectorPerfilesF[vectorElectroF][k])
        k = k + 1
    #print vectorMulti
    return vectorMulti


def funcionTiempos(perfil):
    '''
    Averigua el tiempo de uso total del electrodomestico, sumando los elementos del vector de uso
    '''
    i=0
    for electro in vectorElectro:
        tiempos[vectorTiempos[i]] = sumarElementosVector(vectorPerfiles[perfil][electro])
#         print perfil
#         print electro
#         print vectorPerfiles[perfil][electro]
#         print tiempos[vectorTiempos[i]]
        i=i+1
    #print tiempos
    return tiempos


def funcionPotencias(perfil):
    '''
    Halla la potencia dividiendo consumo entre tiempo (y multiplicado por el factor de numero de personas)
    '''
    j=0
    for potencia in vectorPotencias:
        if potencia == 'pRadiador':
            potencias[vectorPotencias[j]] = 1.2
        elif potencia == 'pClima':
            potencias[vectorPotencias[j]] = 2.0
        else:
            potencias[vectorPotencias[j]] = numeroPersonas[vectorPersonas[perfil]] * ( CONSUMOSMEDIOS[vectorConsumos[j]] / tiempos[vectorTiempos[j]] )
            #potencias[vectorPotencias[j]] = consumosMedios[vectorConsumos[j]] / tiempos[vectorTiempos[j]]
        j=j+1
    #print numeroPersonas[vectorPersonas[perfil]]
    return potencias


def perfilOcupacion(ocupacion):
    '''
    La variable "perfil" determina la ocupacion de la vivienda segun que personas que la habitan
    0 UnAdulto
    1 UnPensionista
    2 DosAdultos
    3 DosAdultosConNinyos
    4 DosPensionistas
    5 DosAdultosYPensionista
    6 TresAdultos
    7 UnAdultoConNinyos
    '''

    #print 'Ocupacion [Adultos, Pensionistas, Ninyos]'
    #print ocupacion

    if ocupacion[0] == 1 and ocupacion[1] == 0 and ocupacion[2] == 0:
        perfil = 0
    elif ocupacion[0] == 0 and ocupacion[1] == 1 and ocupacion[2] == 0:
        perfil = 1
    elif ocupacion[0] == 2 and ocupacion[1] == 0 and ocupacion[2] == 0:
        perfil = 2
    elif ocupacion[0] == 2 and ocupacion[1] == 0 and ocupacion[2] != 0:
        perfil = 3
    elif ocupacion[0] == 0 and ocupacion[1] == 2 and ocupacion[2] == 0:
        perfil = 4
    elif ocupacion[0] == 2 and ocupacion[1] != 0 and ocupacion[2] == 0:
        perfil = 5
    elif ocupacion[0] == 3 and ocupacion[1] == 0 and ocupacion[2] == 0:
        perfil = 6
    elif ocupacion[0] == 1 and ocupacion[1] == 0 and ocupacion[2] != 0:
        perfil = 7
    else:
        print 'caracterizacion energetica distinta a las especificadas'
        print 'tomamos como ocupacion estandar un adulto con ninyos'
        perfil = 7
    return perfil


def perfilSimuladoDetalles(EnerCat):
#def perfilSimuladoDetalles():
    '''
    perfil simulado devuelve una caracterizacion generica diaria:

    perfilSimuladoDetalles va a devolver lo mismo pero en detalles:
    {'Iluminacion': vector,'Electrodomesticos': vector,'Otros': vector}

    En un futuro sera asi:
    { 'Iluminacion': vector,
      'Electrodomesticos': vector,
      'CLimatizacion': vector,
      'Otros': vector,
      'Estimaciones':{'Proximafactura':['kwh','€'], 'Hastahoy':['kwh','€']} }
    '''

    #print ''
    vector = VECTOR_NULO
    vector1 = VECTOR_NULO
    vector2 = VECTOR_NULO
    vector3 = VECTOR_NULO
    vector4 = VECTOR_NULO

    for userID, catUserID in EnerCat.iteritems():
        #print ''
        #print 'USUARIO', userID
        #print catUserID['Ocupa']
        try:
            if catUserID['Ocupa'] == []:
                raise
            if catUserID['Ocupa'][0] + catUserID['Ocupa'][1] == 0:
                raise
        except:
            print 'OCUPA ERROR'
            return vector
        perfil = perfilOcupacion(catUserID['Ocupa'])
        #print perfil
        #print ''

        tiempos = funcionTiempos(perfil)
        #print tiempos
        #print ''
        potencias = funcionPotencias(perfil)
#         print potencias

        '''
        ILUMINACION
        'Ocupa' 'Ilumi'

        ELECTRODOMESTICOS
        'Ocupa' 'Placa_3' 'Placa_4' 'Vitro_3' 'Vitro_4' 'Horno' 'Micro' 'Frigo' 'Vaji' 'Lava' 'Seca'

        CLIMATIZACION
        'Ocupa' 'Rad' 'Termo' 'AA'

        RESTO DE ELEMENTOS
        'Ocupa' 'TV' 'Multi' 'PC'

        ELEMENTOS NO CONSIDERADOS
        'Ocupa' 'B_bacon' 'B_incand' 'DL' 'Fluor' 'Halo' 'Calefac' 'Convec' 'V_alu' 'V_hie' 'V_mad' 'V_PVC' 'M2' 'Orien' 'Consumo' 'Anyo' 'Vivi' 'Habs' 'Zona' 
        '''

        for elemento, propiedades in catUserID.iteritems():

            estacion = electroEstacion(catUserID['Ocupa'], propiedades, perfil)

            ''' ILUMINACION '''
            #Hay que comentar la linea de VECTOR_NULO para que finalmente incluyamos la ILUMINACION
            if 'Ocupa' in elemento:
                #print elemento
                #el metodo "electroIlumi" se encarga tambien de agregar al vector el consumo por la iluminacion
                vector1 = map(_add, vector1, electroIlumi(catUserID['Ocupa'], propiedades, perfil))

            ''' ELECTRODOMESTICOS '''
            if 'Placa_3' in elemento:
                #print elemento
                electro = 0
                vector2 = map(_add, vector2, electroPlaca_3(catUserID['Ocupa'], propiedades, perfil, electro))
            if 'Placa_4' in elemento:
                #print elemento
                electro = 0
                vector2 = map(_add, vector2, electroPlaca_4(catUserID['Ocupa'], propiedades, perfil, electro))
            if 'Vitro_3' in elemento:
                #print elemento
                electro = 0
                vector2 = map(_add, vector2, electroVitro_3(catUserID['Ocupa'], propiedades, perfil, electro))
            if 'Vitro_4' in elemento:
                #print elemento
                electro = 0
                vector2 = map(_add, vector2, electroVitro_4(catUserID['Ocupa'], propiedades, perfil, electro))
            if 'Horno' in elemento:
                #print elemento
                electro = 1
                vector2 = map(_add, vector2, electroHorno(catUserID['Ocupa'], propiedades, perfil, electro))
            if 'Micro' in elemento:
                #print elemento
                electro = 2
                vector2 = map(_add, vector2, electroMicro(catUserID['Ocupa'], propiedades, perfil, electro))
            if 'Frigo' in elemento:
                #print elemento
                #Se podria hallar el consumo de nevera y congelador por separado pero el calculo es conjunto
                #El electro 3 es la nevera y el electro 4 es el congelador
                electroList = [3,4]
#                 print type(electroList)
#                 print electroList
                vector2 = map(_add, vector2, electroFrigo(catUserID['Ocupa'], propiedades, perfil, electroList))
            if 'Vaji' in elemento:
                #print elemento
                electro = 7
                vector2 = map(_add, vector2, electroVaji(catUserID['Ocupa'], propiedades, perfil, electro))
            if 'Lava' in elemento:
                #print elemento
                electro = 8
                vector2 = map(_add, vector2, electroLava(catUserID['Ocupa'], propiedades, perfil, electro))
            if 'Seca' in elemento:
                #print elemento
                electro = 9
                vector2 = map(_add, vector2, electroSeca(catUserID['Ocupa'], propiedades, perfil, electro))

            ''' CLIMATIZACION '''
            #if estacion == ocurrenciasIluminacion.items()[0][0]:
            if estacion == 'oInvierno':
                if 'Rad' in elemento:
                    #print elemento
                    electro = 10
                    vector3 = map(_add, vector3, electroRad(catUserID['Ocupa'], propiedades, perfil, electro))
            else:
                pass
            if 'Termo' in elemento:
                #print elemento
                electro = 12
                vector3 = map(_add, vector3, electroTermo(catUserID['Ocupa'], propiedades, perfil, electro))
            #if estacion == ocurrenciasIluminacion.items()[0][0]:
            if estacion == 'oInvierno':
                if 'AA' in elemento:
                    #print elemento
                    electro = 13
                    vector3 = map(_add, vector3, electroAA(catUserID['Ocupa'], propiedades, perfil, electro))
            else:
                pass

            ''' RESTO DE ELEMENTOS '''
            if 'TV' in elemento:
                #print elemento
                electro = 5
                vector4 = map(_add, vector4, electroTV(catUserID['Ocupa'], propiedades, perfil, electro))
            if 'Multi' in elemento:
                #print elemento
                electro = 6
                vector4 = map(_add, vector4, electroMulti(catUserID['Ocupa'], propiedades, perfil, electro))
            if 'PC' in elemento:
                #print elemento
                electro = 11
                vector4 = map(_add, vector4, electroPC(catUserID['Ocupa'], propiedades, perfil, electro))
            if 'Portatil' in elemento:
                #print elemento
                electro = 11
                vector4 = map(_add, vector4, electroPortatil(catUserID['Ocupa'], propiedades, perfil, electro))

            ''' ELEMENTOS NO CONSIDERADOS '''
            if 'B_bacon' in elemento:
                #print elemento
                vector = map(_add, vector, electroB_bacon(catUserID['Ocupa'], propiedades, perfil))
            if 'B_incand' in elemento:
                #print elemento
                vector = map(_add, vector, electroB_incand(catUserID['Ocupa'], propiedades, perfil))
            if 'DL' in elemento:
                #print elemento
                vector = map(_add, vector, electroDL(catUserID['Ocupa'], propiedades, perfil))
            if 'Fluor' in elemento:
                #print elemento
                vector = map(_add, vector, electroFluor(catUserID['Ocupa'], propiedades, perfil))
            if 'Halo' in elemento:
                #print elemento
                vector = map(_add, vector, electroHalo(catUserID['Ocupa'], propiedades, perfil))
            if 'Calefac' in elemento:
                #print elemento
                vector = map(_add, vector, electroCalefac(catUserID['Ocupa'], propiedades, perfil))
            if 'Convec' in elemento:
                #print elemento
                vector = map(_add, vector, electroConvec(catUserID['Ocupa'], propiedades, perfil))
            if 'V_alu' in elemento:
                #print elemento
                vector = map(_add, vector, electroV_alu(catUserID['Ocupa'], propiedades, perfil))
            if 'V_hie' in elemento:
                #print elemento
                vector = map(_add, vector, electroV_hie(catUserID['Ocupa'], propiedades, perfil))
            if 'V_mad' in elemento:
                #print elemento
                vector = map(_add, vector, electroV_mad(catUserID['Ocupa'], propiedades, perfil))
            if 'V_PVC' in elemento:
                #print elemento
                vector = map(_add, vector, electroV_PVC(catUserID['Ocupa'], propiedades, perfil))
            if 'M2' in elemento:
                #print elemento
                vector = map(_add, vector, electroM2(catUserID['Ocupa'], propiedades, perfil))
            if 'Orien' in elemento:
                #print elemento
                vector = map(_add, vector, electroOrien(catUserID['Ocupa'], propiedades, perfil))
            if 'Consumo' in elemento:
                #print elemento
                vector = map(_add, vector, electroConsumo(catUserID['Ocupa'], propiedades, perfil))
            if 'Anyo' in elemento:
                #print elemento
                vector = map(_add, vector, electroAnyo(catUserID['Ocupa'], propiedades, perfil))
            if 'Vivi' in elemento:
                #print elemento
                vector = map(_add, vector, electroVivi(catUserID['Ocupa'], propiedades, perfil))
            if 'Habs' in elemento:
                #print elemento
                vector = map(_add, vector, electroHabs(catUserID['Ocupa'], propiedades, perfil))
            if 'Zona' in elemento:
                #print elemento
                vector = map(_add, vector, electroZona(catUserID['Ocupa'], propiedades, perfil))

#     ''' UnAdulto Dummy '''
#     resultado = {       'Iluminacion' : [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.23399999999999999, 0.23399999999999999, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.23399999999999999, 0.23399999999999999, 0.23399999999999999, 0.23399999999999999, 0.23399999999999999, 0.23399999999999999],
#                   'Electrodomesticos' : [0.22667762, 0.13958333, 0.13958333, 0.13958333, 0.13958333, 0.13958333, 0.14203346, 0.14203346, 0.14203346, 0.13958333, 0.13958333, 0.13958333, 0.29603929, 0.3036124, 0.3036124, 0.17587262, 0.13958333, 0.13958333, 0.27975, 0.40955, 0.85393085, 0.85393085, 0.67368085, 0.67368085],
#                       'Climatizacion' : [0., 0., 0., 0., 0., 0., 0.68248299, 0.68248299, 0.68248299, 0., 0., 0., 0., 0., 0., 0., 0., 0., 2.33333333, 2.33333333, 2.34914966, 2.34914966, 2.34914966, 2.34914966],
#                   'Resto de elementos': [0., 0., 0., 0., 0., 0., 0.06193333, 0.06193333, 0.06193333, 0., 0., 0., 0.06193333, 0.06193333, 0.06193333, 0.06193333, 0.06193333, 0.06193333, 0.12993333, 0.27993333, 0.27993333, 0.27993333, 0.27993333, 0.27993333] }
#     return resultado

    vecIlu = []
    for energia1 in vector1:
        vecIlu.append(round(energia1, 6))
    vecElec = []
    for energia2 in vector2:
        vecElec.append(round(energia2, 6))
    vecClima = []
    for energia3 in vector3:
        vecClima.append(round(energia3, 6))
    vecResto = []
    for energia4 in vector4:
        vecResto.append(round(energia4, 6))
    #return {'Iluminacion' : vectorIlu, 'Electrodomesticos' : vectorElec, 'Climatizacion' : vectorClima, 'Resto de elementos' : vectorResto}

# [['Hora','Electrodomesticos',Climatizacion','Iluminacion','Resto de elementos']
#  [1,0.4,0,1,5],
#  [2,...]
#  [3,...]
#  [4,...]
#  ...
#  [24,...]

    vecHoras = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]
    vecNom = ['Hora', 'Iluminacion', 'Electrodomesticos', 'Clima', 'Resto']
    lisEner = list()
    lisEner.append(vecNom)
    for indi in range(len(vecHoras)):
        lisEner.append([vecHoras[indi],vecIlu[indi],vecElec[indi],vecClima[indi],vecResto[indi]])
    return lisEner

#     from kernelCaracterizacionEnergetica import perfilSimuladoDetalles
#     teste = {"414":{"Ocupa":[1,0,0],"Frigo0":[1,"A+"],"Horno0":[1],"Lava0":[1,"A+"],"Vaji":[1],"Micro":[1],"Placa_3":[1],"Seca0":[1,"A+"],"PC":[1],"TV":[1],"Portatil":[1],"B_bacon0":[5,"26"],"Fluor0":[4,"36"],"AA0":[1],"Zona":[1,"Atlantica"],"V_PVC":[6],"Habs":[1,"3"],"M2":[1,"Menor de 100 m2"],"Orien":[1,"Norte"],"Vivi":[1,"Bloque de viviendas"],"Anyo":[1,"Entre 1975 y 2005"],"Termo0":[1],"Rad0":[1,"1200"],"Multi":[1]}}
#     perfilSimuladoDetalles(teste)


def perfilSimulado(EnerCat):
    '''
    funcion que devuelve un vector de 24 horas con el consumo energetico para cada hora
    que sera el resultado de procesar las caracterizationes energeticas de cada usuario
    '''

    #print ''
    vector = VECTOR_NULO

    for userID, catUserID in EnerCat.iteritems():
        #print ''
        #print 'USUARIO', userID
        #print catUserID['Ocupa']

        try:
            if catUserID['Ocupa'] == []:
                raise
            if catUserID['Ocupa'][0] + catUserID['Ocupa'][1] == 0:
                raise
        except:
            print 'OCUPA ERROR'
            return vector

        perfil = perfilOcupacion(catUserID['Ocupa'])
        #print perfil
        #print ''
        tiempos = funcionTiempos(perfil)
        #print tiempos
        #print ''
        potencias = funcionPotencias(perfil)
#         print potencias

        for elemento, propiedades in catUserID.iteritems():
            estacion = electroEstacion(catUserID['Ocupa'], propiedades, perfil)
            #Hay que comentar la linea de VECTOR_NULO para que finalmente incluyamos la ILUMINACION
            if 'Ocupa' in elemento:
                #print elemento
                #el metodo "electroIlumi" se encarga tambien de agregar al vector el consumo por la iluminacion
                vector = map(_add, vector, electroIlumi(catUserID['Ocupa'], propiedades, perfil))
            if 'Placa_3' in elemento:
                #print elemento
                electro = 0
                vector = map(_add, vector, electroPlaca_3(catUserID['Ocupa'], propiedades, perfil, electro))
            if 'Placa_4' in elemento:
                #print elemento
                electro = 0
                vector = map(_add, vector, electroPlaca_4(catUserID['Ocupa'], propiedades, perfil, electro))
            if 'Vitro_3' in elemento:
                #print elemento
                electro = 0
                vector = map(_add, vector, electroVitro_3(catUserID['Ocupa'], propiedades, perfil, electro))
            if 'Vitro_4' in elemento:
                #print elemento
                electro = 0
                vector = map(_add, vector, electroVitro_4(catUserID['Ocupa'], propiedades, perfil, electro))
            if 'Horno' in elemento:
                #print elemento
                electro = 1
                vector = map(_add, vector, electroHorno(catUserID['Ocupa'], propiedades, perfil, electro))
            if 'Micro' in elemento:
                #print elemento
                electro = 2
#                 vector = map(_add, vector, electroMicro(catUserID['Ocupa'], propiedades, perfil, electro))
                vector = map(_add, vector, electroMicro(catUserID['Ocupa'], propiedades, electro))
            if 'Frigo' in elemento:
                #print elemento
                #Se podria hallar el consumo de nevera y congelador por separado pero el calculo es conjunto
                #El electro 3 es la nevera y el electro 4 es el congelador
                electroList = [3,4]
#                 print type(electroList)
#                 print electroList
                vector = map(_add, vector, electroFrigo(catUserID['Ocupa'], propiedades, perfil, electroList))
            if 'TV' in elemento:
                #print elemento
                electro = 5
                vector = map(_add, vector, electroTV(catUserID['Ocupa'], propiedades, perfil, electro))
            if 'Multi' in elemento:
                #print elemento
                electro = 6
                vector = map(_add, vector, electroMulti(catUserID['Ocupa'], propiedades, perfil, electro))
            if 'Vaji' in elemento:
                #print elemento
                electro = 7
                vector = map(_add, vector, electroVaji(catUserID['Ocupa'], propiedades, perfil, electro))
            if 'Lava' in elemento:
                #print elemento
                electro = 8
                vector = map(_add, vector, electroLava(catUserID['Ocupa'], propiedades, perfil, electro))
            if 'Seca' in elemento:
                #print elemento
                electro = 9
                vector = map(_add, vector, electroSeca(catUserID['Ocupa'], propiedades, perfil, electro))
            #if estacion == ocurrenciasIluminacion.items()[0][0]:
            if estacion == 'oInvierno':
                if 'Rad' in elemento:
                    #print elemento
                    electro = 10
                    vector = map(_add, vector, electroRad(catUserID['Ocupa'], propiedades, perfil, electro))
            else:
                pass
            if 'PC' in elemento:
                #print elemento
                electro = 11
                vector = map(_add, vector, electroPC(catUserID['Ocupa'], propiedades, perfil, electro))
#             if 'Portatil' in elemento:
#                 #print elemento
#                 electro = 11
#                 vector = map(_add, vector, electroPortatil(catUserID['Ocupa'], propiedades, perfil, electro))
            if 'Termo' in elemento:
                #print elemento
                electro = 12
                vector = map(_add, vector, electroTermo(catUserID['Ocupa'], propiedades, perfil, electro))
            #if estacion == ocurrenciasIluminacion.items()[0][0]:
            if estacion == 'oInvierno':
                if 'AA' in elemento:
                    #print elemento
                    electro = 13
                    vector = map(_add, vector, electroAA(catUserID['Ocupa'], propiedades, perfil, electro))
            else:
                pass
            if 'B_bacon' in elemento:
                #print elemento
                vector = map(_add, vector, electroB_bacon(catUserID['Ocupa'], propiedades, perfil))
            if 'B_incand' in elemento:
                #print elemento
                vector = map(_add, vector, electroB_incand(catUserID['Ocupa'], propiedades, perfil))
            if 'DL' in elemento:
                #print elemento
                vector = map(_add, vector, electroDL(catUserID['Ocupa'], propiedades, perfil))
            if 'Fluor' in elemento:
                #print elemento
                vector = map(_add, vector, electroFluor(catUserID['Ocupa'], propiedades, perfil))
            if 'Halo' in elemento:
                #print elemento
                vector = map(_add, vector, electroHalo(catUserID['Ocupa'], propiedades, perfil))
            if 'Calefac' in elemento:
                #print elemento
                vector = map(_add, vector, electroCalefac(catUserID['Ocupa'], propiedades, perfil))
            if 'Convec' in elemento:
                #print elemento
                vector = map(_add, vector, electroConvec(catUserID['Ocupa'], propiedades, perfil))
            if 'V_alu' in elemento:
                #print elemento
                vector = map(_add, vector, electroV_alu(catUserID['Ocupa'], propiedades, perfil))
            if 'V_hie' in elemento:
                #print elemento
                vector = map(_add, vector, electroV_hie(catUserID['Ocupa'], propiedades, perfil))
            if 'V_mad' in elemento:
                #print elemento
                vector = map(_add, vector, electroV_mad(catUserID['Ocupa'], propiedades, perfil))
            if 'V_PVC' in elemento:
                #print elemento
                vector = map(_add, vector, electroV_PVC(catUserID['Ocupa'], propiedades, perfil))
            if 'M2' in elemento:
                #print elemento
                vector = map(_add, vector, electroM2(catUserID['Ocupa'], propiedades, perfil))
            if 'Orien' in elemento:
                #print elemento
                vector = map(_add, vector, electroOrien(catUserID['Ocupa'], propiedades, perfil))
            if 'Consumo' in elemento:
                #print elemento
                vector = map(_add, vector, electroConsumo(catUserID['Ocupa'], propiedades, perfil))
            if 'Anyo' in elemento:
                #print elemento
                vector = map(_add, vector, electroAnyo(catUserID['Ocupa'], propiedades, perfil))
            if 'Vivi' in elemento:
                #print elemento
                vector = map(_add, vector, electroVivi(catUserID['Ocupa'], propiedades, perfil))
            if 'Habs' in elemento:
                #print elemento
                vector = map(_add, vector, electroHabs(catUserID['Ocupa'], propiedades, perfil))
            if 'Zona' in elemento:
                #print elemento
                vector = map(_add, vector, electroZona(catUserID['Ocupa'], propiedades, perfil))
    #print ''
    #print 'VECTOR DE ENERGIA CONSUMIDA'
    vector2 = []
    for energia in vector:
        #KILOWATIOSHORA
        #vector2.append(energia)
        vector2.append(round(energia, 6))
        #WATIOSHORA
        #vector2.append(round(energia, 5))
    #return vector
    return vector2


def dateChangeToSummer(ANHO=None):
    '''
    Devuelve la fecha en el año indicado, en que se pasada de invierno a verano
    '''
    try:
        import datetime
    except:
        raise
    # FechaCandidato es el ultimo dia del mes de MARZO
    FechaCandidato = datetime.datetime(ANHO,3,31)
    ResultDate = None
    while not ResultDate:
        if FechaCandidato.weekday() == 6:
            ResultDate = FechaCandidato
        else:
            FechaCandidato = FechaCandidato - datetime.timedelta(1)
    return ResultDate


def dateChangeToWinter(ANHO=None):
    '''
    Devuelve la fecha en el año indicado, en que se pasada de verano a invierno
    '''
    try:
        import datetime
    except:
        raise
    # FechaCandidato es el ultimo dia del mes de OCTUBRE
    FechaCandidato = datetime.datetime(ANHO,10,31)
    ResultDate = None
    while not ResultDate:
        if FechaCandidato.weekday() == 6:
            ResultDate = FechaCandidato
        else:
            FechaCandidato = FechaCandidato - datetime.timedelta(1)
    return ResultDate


def electroEstacion(Ocupa, Estaci, perfil):
    '''
    Ocupacion (Ocupa)
    es un array del numero de personas segun su edad, es decir, [Ninyos, Adultos, Pensionistas]

    Estacion (Estaci que puede ser Invierno o Verano)
    esta funcion se encarga de averiguar segun el dia actual, en que temporada nos encontramos

    La variable "Estaci" no se utiliza, pero se mantiene por completitud con el resto de funciones,
    salvo que se quiera indicar un dia actual irreal, para comprobar la funcionalidad de la funcion
    '''

#     #Estaciones de invierno y verano segun el cambio de horario en espanya
#     #Consideramos verano las estaciones de primavera y verano
#     #Consideramos invierno las estaciones de otonyo e invierno
#     #Los dias son referentes al año 2013, pero estas fechas varian segun el anyo

#     equinoccioPrimavera = datetime.datetime(now.year,3,20)
#     solsticioVerano = datetime.datetime(now.year,6,21)
#     equinoccioOtonyo = datetime.datetime(now.year,9,22)
#     solsticioInvierno = datetime.datetime(now.year,12,21)

    #La tarifa electrica en principio definira la temporada de invierno y de verano
    currentDate = datetime.datetime.now()
    currentDay = datetime.datetime(currentDate.year, currentDate.month, currentDate.day)
    currentYear = currentDate.year

    #El 1 de Enero
    January1 = datetime.datetime(currentYear,1,1)
    #El 31 de Diciembre
    December31 = datetime.datetime(currentYear,12,31)
    #El cambio de horario de VERANO se produce el último domingo de Marzo según la directiva Europea 2000/84
    lastSundayMarch = dateChangeToSummer(currentYear)
    #El cambio de horario de INVIERNO se produce el último domingo de Octubre según la directiva Europea 2000/84
    lastSundayOctober = dateChangeToWinter(currentYear)

    if ( currentDay >= January1 and currentDay < lastSundayMarch ) or ( currentDay >= lastSundayOctober and currentDay <= December31 ):
        estacion = 'oInvierno'
    elif currentDay >= lastSundayMarch and currentDay < lastSundayOctober:
        estacion = 'oVerano'

#     # Para que funcione como si temporalmente estuvieramos en otra estacion distinta a la real
#     estacion = 'oVerano'

    #vector = VECTOR_NULO
    return estacion


def electroIlumi(Ocupa, Ilumi, perfil):
    '''
    Ocupacion (Ocupa)
    es un array del numero de personas segun su edad, es decir, [Ninyos, Adultos, Pensionistas]

    Iluminacion (Ilumi)
    esta funcion se ocupa de averiguar lo que aporta al consumo la iluminacion segun el perfil
    '''
    #estacion = electroEstacion(None, False, None)
    estacion = electroEstacion(Ocupa,None,perfil)
    if estacion == 'oInvierno':
        consumoHabs = CONSUMOSMEDIOS['cIlumiInvierno'] * vectorPuntosLuz[perfil] / sumarElementosVector(ocurrenciasIluminacion['oInvierno'])
        vector = multiplicarDiccionarioPorNumero(ocurrenciasIluminacion, 'oInvierno', consumoHabs)
    elif estacion == 'oVerano':
        consumoHabs = CONSUMOSMEDIOS['cIlumiVerano'] * vectorPuntosLuz[perfil] / sumarElementosVector(ocurrenciasIluminacion['oVerano'])
        vector = multiplicarDiccionarioPorNumero(ocurrenciasIluminacion, 'oVerano', consumoHabs)
    #damos al vector el valor NULO si queremos averiguar el vector final de consumo SIN ILUMINACION
    #vector = VECTOR_NULO
    return vector


def vectorPlaca(consumoPlaca):
    '''
    Dado que se repite el vector de consumo para distintos tipos de placa, definimos uno generico
    '''
    VECTOR_PLACA = [0, 0, 0, 0, 0, 0, 0, consumoPlaca, consumoPlaca, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, consumoPlaca, consumoPlaca, consumoPlaca, consumoPlaca, consumoPlaca, consumoPlaca]
    #return VECTOR_PLACA
    return VECTOR_NULO


def electroPlaca_3(Ocupa, Placa_3, perfil, electro):
    '''
    Placa induccion 3 focos (Placa_3)
    2 horas al dia
    '''

    try:
        if Placa_3 == []:
            raise
    except:
        print 'PLACA_3 ERROR'
        vector = VECTOR_NULO
        return vector

    potenciaPlaca_3 = potencias['pCocinaElectrica']
#     print potenciaPlaca_3
    consumoPlaca_3 = potenciaPlaca_3 * Placa_3[0]
    #electro = 0
    #print consumoPlaca_3
    vector = multiplicarDiccionarioPorNumero(vectorPerfiles[perfil], vectorElectro[electro], consumoPlaca_3)
    #print vector
    #vector2 = vectorPlaca(consumoPlaca_3)
    #print vector2
    #return VECTOR_NULO
    return vector


def electroPlaca_4(Ocupa, Placa_4, perfil, electro,potencias = potencias):

    '''
    Placa induccion 4 focos (Placa_4)
    2 horas al dia

    consumoelemento('definicio del elemento',perfil)

    consumoelemento(arg1 = {
    'Perfil1':{'Parametro':0.4,'Distro':[0,1,...,23]},
    'Perfil2':{'Parametro':0.2,'Distro':[0,1,...,23]},
    'Perfil3':{'Parametro':0.1,'Distro':[23,22,...,0]},
    }, arg2 = otrasDefiniciones , arg3 = Perfil3)

    potenciaElemento =arg1[arg3]['Parametro'] * (arg2[numerodeelectroDomesticos]) 
    consumoElemento =arg1[arg3]['Distro']

    consumoelemento(Ocupa, Placa_4, perfil, electro) el resultado deberia ser lo mismo si la placa4 esta bien definida.
    consumoelemento({'Parametro':0.4,'Distro':[0,1,...,23]},perfil)
    '''

    try:
        if Placa_4 == []:
            raise
    except:
        print 'PLACA_4 ERROR'
        vector = VECTOR_NULO
        return vector

    potenciaPlaca_4 = potencias['pCocinaElectrica']
    consumoPlaca_4 = potenciaPlaca_4 * Placa_4[0]
    #electro = 0
    #print consumoPlaca_4
    vector = multiplicarDiccionarioPorNumero(vectorPerfiles[perfil], vectorElectro[electro], consumoPlaca_4)
    #print vector
    #vector2 = vectorPlaca(consumoPlaca_4)
    #print vector2
    #return VECTOR_NULO
    return vector


def electroVitro_3(Ocupa, Vitro_3, perfil, electro):
    '''
    Vitro 3 focos (Vitro_3)
    2 horas al dia
    '''

    try:
        if Vitro_3 == []:
            raise
    except:
        print 'VITRO_3 ERROR'
        vector = VECTOR_NULO
        return vector

    potenciaVitro_3 = potencias['pCocinaElectrica']
    consumoVitro_3 = potenciaVitro_3 * Vitro_3[0]
    #electro = 0
    #print consumoVitro_3
    vector = multiplicarDiccionarioPorNumero(vectorPerfiles[perfil], vectorElectro[electro], consumoVitro_3)
    #print vector
    #vector2 = vectorPlaca(consumoVitro_3)
    #print vector2
    #return VECTOR_NULO
    return vector


def electroVitro_4(Ocupa, Vitro_4, perfil, electro):
    '''
    Vitro 4 focos (Vitro_4)
    2 horas al dia
    '''

    try:
        if Vitro_4 == []:
            raise
    except:
        print 'VITRO_4 ERROR'
        vector = VECTOR_NULO
        return vector

    potenciaVitro_4 = potencias['pCocinaElectrica']
    consumoVitro_4 = potenciaVitro_4 * Vitro_4[0]
    #electro = 0
    #print consumoVitro_4
    vector = multiplicarDiccionarioPorNumero(vectorPerfiles[perfil], vectorElectro[electro], consumoVitro_4)
    #print vector
    #vector2 = vectorPlaca(consumoVitro_4)
    #print vector2
    #return VECTOR_NULO
    return vector


def electroHorno(Ocupa, Horno, perfil, electro):
    '''
    Horno (Horno)
    2 horas al dia

    #python -m doctest -v kernelCaracterizacionEnergetica.py
    #es necesario llamar a la funcion "perfilSimulado" para que funcionen los metodos como por ej "electroHorno"

    doctest:
    >>> teste = {"414":{"Ocupa":[1,0,0],"Frigo0":[1,"A+"],"Horno0":[1],"Lava0":[1,"A+"],"Vaji":[1],"Micro":[1],"Placa_3":[1],"Seca0":[1,"A+"],"PC":[1],"TV":[1],"Portatil":[1],"B_bacon0":[5,"26"],"Fluor0":[4,"36"],"AA0":[1],"Zona":[1,"Atlantica"],"V_PVC":[6],"Habs":[1,"3"],"M2":[1,"Menor de 100 m2"],"Orien":[1,"Norte"],"Vivi":[1,"Bloque de viviendas"],"Anyo":[1,"Entre 1975 y 2005"],"Termo0":[1],"Rad0":[1,"1200"]}}
    >>> perfilSimulado(teste)
    [0.168615, 0.139583, 0.139583, 0.139583, 0.139583, 0.139583, 1.796169, 2.030169, 2.030169, 0.139583, 0.139583, 0.139583, 0.288178, 0.382845, 0.382845, 0.168615, 0.139583, 0.139583, 2.14117, 7.364037, 2.749801, 4.30415, 6.618188, 4.017201]
    >>> electroHorno(teste['414']['Ocupa'],teste['414']['Horno0'],0,1)
    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.11956281407035176, 0.11956281407035176, 0.11956281407035176, 0.0, 0.0, 0.0, 0.0, 0.0, 0.18115577889447235, 0.18115577889447235, 0.0, 0.0]
    '''

    try:
        if Horno == []:
            raise
    except:
        print 'HORNO ERROR'
        vector = VECTOR_NULO
        return vector

    potenciaHorno = potencias['pHornoElectrico']
    consumoHorno = potenciaHorno * Horno[0]
    #electro = 1
    #print consumoHorno
    vector = multiplicarDiccionarioPorNumero(vectorPerfiles[perfil], vectorElectro[electro], consumoHorno)
    #print vector
    #vector2 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    #           0, 0, (0.05 * consumoHorno), (0.2 * consumoHorno), (0.5 * consumoHorno), (0.15 * consumoHorno), (0.1 * consumoHorno), 0, 0, 0, 0, 0]
    #print vector2
    #vector = VECTOR_NULO
    return vector


# def electroMicro(Ocupa, Micro, perfil, electro):
def electroMicro(Ocupa, Micro, electro):
    '''
    Microondas (Micro)
    '''

    try:
        if Micro == []:
            raise
    except:
        print 'MICRO ERROR'
        vector = VECTOR_NULO
        return vector

    perfil = perfilOcupacion(Ocupa)
    potenciaMicro = potencias['pMicroondas']
    consumoMicro = potenciaMicro * Micro[0]
    #electro = 2
    #print consumoMicro
    vector = multiplicarDiccionarioPorNumero(vectorPerfiles[perfil], vectorElectro[electro], consumoMicro)
    #print vector
    #vector = VECTOR_NULO
    return vector


def electroFrigo(Ocupa, Frigo, perfil, electroListF):
    '''
    Frigorifico (Frigo)
    24 horas al dia
    '''

    try:
        if Frigo == []:
            raise
    except:
        print 'FRIGO ERROR'
        vector = VECTOR_NULO
        return vector

#     def _energiaFrigoFromClase(FrigoF, consumoFrigoF):
# 
#         '''
#         Clasificacion energetica
#         Clase A+++ Consumo 157.20
#         Clase A++  Consumo 196.50
#         Clase A+   Consumo 235.80
#         Clase A    Consumo 360.25
#         Clase B    Consumo 425.75
#         Clase C    Consumo 524.00
#         '''
# 
#         strClaseF = str(FrigoF[1])
# 
#         if strClaseF == 'A+++':
#             energiaFrigoF = consumoFrigoF * (1 - (1 - 0.24))
#         elif strClaseF == 'A++':
#             energiaFrigoF = consumoFrigoF * (1 - (1 - 0.30))
#         elif strClaseF == 'A+':
#             energiaFrigoF = consumoFrigoF * (1 - (1 - 0.36))
#         elif strClaseF == 'A':
#             energiaFrigoF = consumoFrigoF * (1 - (1 - 0.55))
#         elif strClaseF == 'B':
#             energiaFrigoF = consumoFrigoF * (1 - (1 - 0.65))
#         elif strClaseF == 'C':
#             energiaFrigoF = consumoFrigoF * (1 - (1 - 0.80))
#         else:
#             energiaFrigoF = 0
# 
#         energiaFrigoTotalF = energiaFrigoF * FrigoF[0]
#         return energiaFrigoTotalF

    potenciaNeve = potencias['pNevera']
    #potenciaNevera = _energiaFrigoFromClase(Frigo, consumoNevera)
    consumoNeve = potenciaNeve * Frigo[0]

    potenciaConge = potencias['pCongelador']
    #potenciaCongelador = _energiaFrigoFromClase(Frigo, consumoCongelador)
    consumoConge = potenciaConge * Frigo[0]

#     print ''
#     print '1'
#     print consumoNeve
#     print '2'
#     print vectorPerfiles[perfil]
#     print '3'
#     print electroListF[0]
#     print '4'
#     print vectorElectro[electroListF[0]]
#     print ''

    #electro = 3
    #print consumoNeve
#     print vectorElectro[3]
#     print vectorElectro[4]
#     print type(electroListF)
#     print electroListF
    vectorNeve = multiplicarDiccionarioPorNumero(vectorPerfiles[perfil], vectorElectro[electroListF[0]], consumoNeve)
    #print vectorNeve

    #electro = 4
    #print consumoConge
    vectorConge = multiplicarDiccionarioPorNumero(vectorPerfiles[perfil], vectorElectro[electroListF[1]], consumoConge)
    #print vectorConge

    vector = []
    if len(vectorNeve) == len(vectorConge):
        lenVec = len(vectorNeve)
    for indice in range(0, lenVec):
        # vector.append(vectorNeve[indice] + vectorConge[indice])
	''' Se ha quitado del electrodomestico FRIGO el aporte energetico del CONGELADOR '''
	vector.append(vectorNeve[indice])
    #vector2 = [consumoFrigo, consumoFrigo, consumoFrigo, consumoFrigo, consumoFrigo, consumoFrigo, consumoFrigo, consumoFrigo, consumoFrigo, consumoFrigo, consumoFrigo, consumoFrigo,
    #           consumoFrigo, consumoFrigo, consumoFrigo, consumoFrigo, consumoFrigo, consumoFrigo, consumoFrigo, consumoFrigo, consumoFrigo, consumoFrigo, consumoFrigo, consumoFrigo]
    #print vector2
    #vector = VECTOR_NULO
    return vector


def electroTV(Ocupa, TV, perfil, electro):
    '''
    Televisor (TV)
    6 horas al dia
    '''

    try:
        if TV == []:
            raise
    except:
        print 'TV ERROR'
        vector = VECTOR_NULO
        return vector

    potenciaTV = potencias['pTelevision']
    consumoTV = potenciaTV * TV[0]
    #electro = 5
    #print consumoTV
    vector = multiplicarDiccionarioPorNumero(vectorPerfiles[perfil], vectorElectro[electro], consumoTV)
    #print vector
    #vector2 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    #           0, 0, 0, 0, 0, 0, consumoTV, consumoTV, consumoTV, consumoTV, consumoTV, consumoTV]
    #print vector2
    #vector = VECTOR_NULO
    return vector

def electroMulti(Ocupa, Multi, perfil, electro):
    '''
    Multimedia (Multi)
    1 hora al dia
    '''

    try:
        if Multi == []:
            raise
    except:
        print 'Multi ERROR'
        vector = VECTOR_NULO
        return vector

    potenciaMulti = potencias['pMultimedia']
    consumoMulti = potenciaMulti * Multi[0]
    #electro = 5
    #print consumoTV
    vector = multiplicarDiccionarioPorNumero(vectorPerfiles[perfil], vectorElectro[electro], consumoMulti)
    #print vector
    #vector2 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    #           0, 0, 0, 0, 0, 0, consumoTV, consumoTV, consumoTV, consumoTV, consumoTV, consumoTV]
    #print vector2
    #vector = VECTOR_NULO
    return vector


def electroVaji(Ocupa, Vaji, perfil, electro):
    '''
    Lavavajillas (Vaji)
    '''

    try:
        if Vaji == []:
            raise
    except:
        print 'VAJI ERROR'
        vector = VECTOR_NULO
        return vector

    potenciaVaji = potencias['pLavavajillas']
    consumoVaji = potenciaVaji * Vaji[0]
    #electro = 7
    #print consumoVaji
    vector = multiplicarDiccionarioPorNumero(vectorPerfiles[perfil], vectorElectro[electro], consumoVaji)
    #print vector
    #vector = VECTOR_NULO
    return vector


def electroLava(Ocupa, Lava, perfil, electro):
    '''
    Lavadora (Lava)
    1 hora al dia
    '''

    try:
        if Lava == []:
            raise
    except:
        print 'LAVA ERROR'
        vector = VECTOR_NULO
        return vector

#     def _energiaLavaFromClase(LavaF, consumoLavaF):
# 
#         '''
#         Clasificacion energetica
#         Clase A+++ Consumo 60.96
#         Clase A++  Consumo 76.20
#         Clase A+   Consumo 91.44
#         Clase A    Consumo 139.70
#         Clase B    Consumo 165.10
#         Clase C    Consumo 203.20
#         '''
# 
#         strClaseF = str(LavaF[1])
# 
#         if strClaseF == 'A+++':
#             energiaLavaF = consumoLavaF * (1 - (1 - 0.24))
#         elif strClaseF == 'A++':
#             energiaLavaF = consumoLavaF * (1 - (1 - 0.30))
#         elif strClaseF == 'A+':
#             energiaLavaF = consumoLavaF * (1 - (1 - 0.36))
#         elif strClaseF == 'A':
#             energiaLavaF = consumoLavaF * (1 - (1 - 0.55))
#         elif strClaseF == 'B':
#             energiaLavaF = consumoLavaF * (1 - (1 - 0.65))
#         elif strClaseF == 'C':
#             energiaLavaF = consumoLavaF * (1 - (1 - 0.80))
#         else:
#             energiaLavaF = 0
# 
#         energiaLavaTotalF = energiaLavaF * LavaF[0]
#         return energiaLavaTotalF

    potenciaLava = potencias['pLavadora']
    #potenciaLava = _energiaLavaFromClase(Lava, consumoLava)
    consumoLava = potenciaLava * Lava[0]
    #electro = 8
    #print consumoLava
    vector = multiplicarDiccionarioPorNumero(vectorPerfiles[perfil], vectorElectro[electro], consumoLava)
    #print vector
    #vector2 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    #           0, 0, 0, 0, 0, 0, (0.2 * consumoLava), (0.2 * consumoLava), (0.2 * consumoLava), (0.2 * consumoLava), (0.1 * consumoLava), (0.1 * consumoLava)]
    #print vector2
    #vector = VECTOR_NULO
    return vector


def electroSeca(Ocupa, Seca, perfil, electro):
    '''
    Secadora (Seca)
    '''

    try:
        if Seca == []:
            raise
    except:
        print 'SECA ERROR'
        vector = VECTOR_NULO
        return vector

    potenciaSeca = potencias['pSecadora']
    consumoSeca = potenciaSeca * Seca[0]
    #electro = 9
    #print consumoSeca
    vector = multiplicarDiccionarioPorNumero(vectorPerfiles[perfil], vectorElectro[electro], consumoSeca)
    #print vector
    #vector = VECTOR_NULO
    return vector


def electroRad(Ocupa, Rad, perfil, electro):
    '''
    RADIADOR (Rad)
    Radiador de aceite (Rad)
    3 horas al dia
    '''

    try:
        if Rad == []:
            raise
    except:
        print 'RAD ERROR'
        vector = VECTOR_NULO
        return vector
    else:

        #consumoRad = float(Rad[1]) * Rad[0]
        potenciaRad = potencias['pRadiador']
        '''
        RADIADOR (1) COSIDERAR COMO ELEMENTO AISLADO
        '''
        Rad[0] = 1
        consumoRad = potenciaRad * Rad[0]
        #electro = 10
        #print consumoRad
        vector = multiplicarDiccionarioPorNumero(vectorPerfiles[perfil], vectorElectro[electro], consumoRad)
        #print vector
        #vector2 = [0, 0, 0, 0, 0, 0, (0.2 * consumoRad), (0.4 * consumoRad), (0.4 * consumoRad), 0, 0, 0,
        #           0, 0, 0, 0, 0, 0, 0, consumoRad, 0, (0.4 * consumoRad), (0.5 * consumoRad), (0.1 * consumoRad)]
        #print vector2
        #vector = VECTOR_NULO
        return vector


def electroPC(Ocupa, PC, perfil, electro):
    '''
    Ordenador sobremesa (PC)
    5 horas al dia
    '''

    try:
        if PC == []:
            raise
    except:
        print 'PC ERROR'
        vector = VECTOR_NULO
        return vector

    potenciaPC = potencias['pOrdenador']
    consumoPC = potenciaPC * PC[0]
    #electro = 11
    #print consumoPC
    vector = multiplicarDiccionarioPorNumero(vectorPerfiles[perfil], vectorElectro[electro], consumoPC)
    #print vector
    #vector2 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    #           0, 0, 0, 0, 0, 0, 0, consumoPC, consumoPC, consumoPC, consumoPC, consumoPC]
    #print vector2
    #vector = VECTOR_NULO
    return vector


def electroPortatil(Ocupa, Portatil, perfil, electro):
    '''
    Ordenador portatil (Portatil)
    5 horas al dia
    '''

    try:
        if Portatil == []:
            raise
    except:
        print 'PORTATIL ERROR'
        vector = VECTOR_NULO
        return vector

    potenciaPortatil = potencias['pOrdenador']
    consumoPortatil = potenciaPortatil * Portatil[0]
    #electro = 11
    #print consumoPortatil
    vector = multiplicarDiccionarioPorNumero(vectorPerfiles[perfil], vectorElectro[electro], consumoPortatil)
    #print vector
    #vector2 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    #           0, 0, 0, 0, 0, 0, 0, consumoPortatil, consumoPortatil, consumoPortatil, consumoPortatil, consumoPortatil]
    #print vector2
    #vector = VECTOR_NULO
    return vector


def electroTermo(Ocupa, Termo, perfil, electro):
    '''
    TermocalentadorElectrico (Termo)
    '''

    try:
        if Termo == []:
            raise
    except:
        print 'TERMO ERROR'
        vector = VECTOR_NULO
        return vector

    #consumoTermo = float(Termo[1]) * Termo[0]
    potenciaTermo = potencias['pCalentadorACS']
    consumoTermo = potenciaTermo * Termo[0]
    #electro = 12
    #print consumoTermo
    vector = multiplicarDiccionarioPorNumero(vectorPerfiles[perfil], vectorElectro[electro], consumoTermo)
    #print vector
    #vector = VECTOR_NULO
    return vector


def electroAA(Ocupa, AA, perfil, electro):
    '''
    CLIMA (AA)
    Aire acondicionado (AA)
    1 hora al dia
    '''

    try:
        if AA == []:
            raise
    except:
        print 'AA ERROR'
        vector = VECTOR_NULO
        return vector

    potenciaAA = potencias['pClima']
    '''
    CLIMA (1) COSIDERAR COMO ELEMENTO AISLADO
    '''
    AA[0] = 1
    consumoAA = potenciaAA * AA[0]
    #electro = 13
    #print consumoAA
    vector = multiplicarDiccionarioPorNumero(vectorPerfiles[perfil], vectorElectro[electro], consumoAA)
    #print vector
    #vector2 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    #           0, 0, 0, 0, 0, 0, (0.1 * consumoAA), (0.2 * consumoAA), (0.2 * consumoAA), (0.3 * consumoAA), (0.15 * consumoAA), (0.05 * consumoAA)]
    #print vector2
    #vector = VECTOR_NULO
    return vector


def vectorLuz(consumoLuz):
    '''
    Dado que se repite el vector de consumo para distintos tipos de luz, definimos uno generico
    '''
    VECTOR_LUZ = [0, 0, 0, 0, 0, 0, 0, consumoLuz, consumoLuz, 0, 0, 0,
                  0, 0, 0, 0, 0, 0, consumoLuz, consumoLuz, consumoLuz, consumoLuz, consumoLuz, consumoLuz]
    #return VECTOR_LUZ
    return VECTOR_NULO


def electroB_bacon(Ocupa, B_bacon, perfil):
    '''
    Bombilla bajo consumo (B_baco)
    '''

    try:
        if B_bacon == []:
            raise
    except:
        print 'B_BACON ERROR'
        vector = VECTOR_NULO
        return vector

#     consumoB_bacon = float(B_bacon[1]) * B_bacon[0]
#     vector = vectorLuz(consumoB_bacon)
    vector = VECTOR_NULO
    return vector


def electroB_incand(Ocupa, B_incand, perfil):
    '''
    Bombilla incandescente (B_incand)
    '''

    try:
        if B_incand == []:
            raise
    except:
        print 'B_INCAND ERROR'
        vector = VECTOR_NULO
        return vector

#     consumoB_incand = float(B_incand[1]) * B_incand[0]
#     vector = vectorLuz(consumoB_incand)
    vector = VECTOR_NULO
    return vector


def electroDL(Ocupa, DL, perfil):
    '''
    Downlight (DL)
    '''

    try:
        if DL == []:
            raise
    except:
        print 'DL ERROR'
        vector = VECTOR_NULO
        return vector

#     consumoDL = float(DL[1]) * DL[0]
#     vector = vectorLuz(consumoDL)
    vector = VECTOR_NULO
    return vector


def electroFluor(Ocupa, Fluor, perfil):
    '''
    Fluorescente (Fluor)
    '''

    try:
        if Fluor == []:
            raise
    except:
        print 'FLUOR ERROR'
        vector = VECTOR_NULO
        return vector

#     consumoFluor = float(Fluor[1]) * Fluor[0]
#     vector = vectorLuz(consumoFluor)
    vector = VECTOR_NULO
    return vector


def electroHalo(Ocupa, Halo, perfil):
    '''
    Foco halogeno (Halo)
    '''

    try:
        if Halo == []:
            raise
    except:
        print 'HALO ERROR'
        vector = VECTOR_NULO
        return vector

#     consumoHalo = float(Halo[1]) * Halo[0]
#     vector = vectorLuz(consumoHalo)
    vector = VECTOR_NULO
    return vector


def electroCalefac(Ocupa, Calefac, perfil):
    '''
    Calefactor (Calefac)
    3 horas al dia
    '''

    try:
        if Calefac == []:
            raise
    except:
        print 'CALEFAC ERROR'
        vector = VECTOR_NULO
        return vector

#     consumoCalefac = float(Calefac[1]) * Calefac[0]
#     vector = [0, 0, 0, 0, 0, 0, (0.2 * consumoCalefac), (0.4 * consumoCalefac), (0.4 * consumoCalefac), 0, 0, 0,
#               0, 0, 0, 0, 0, 0, 0, consumoCalefac, 0, (0.4 * consumoCalefac), (0.5 * consumoCalefac), (0.1 * consumoCalefac)]
    vector = VECTOR_NULO
    return vector


def electroConvec(Ocupa, Convec, perfil):
    '''
    Convector de aire (Convec)
    1 hora al dia
    '''

    try:
        if Convec == []:
            raise
    except:
        print 'CONVEC ERROR'
        vector = VECTOR_NULO
        return vector

#     potenciaConvec = 0
#     consumoConvec = energiaConvec * Convec[0]
#     vector = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#               0, 0, 0, 0, 0, 0, (0.1 * consumoConvec), (0.2 * consumoConvec), (0.2 * consumoConvec), (0.3 * consumoConvec), (0.15 * consumoConvec), (0.05 * consumoConvec)]
    vector = VECTOR_NULO
    return vector


def electroV_alu(Ocupa, V_alu, perfil):
    '''
    Ventana aluminio (V_alu)
    '''

    try:
        if V_alu == []:
            raise
    except:
        print 'V_ALU ERROR'
        vector = VECTOR_NULO
        return vector

    vector = VECTOR_NULO
    return vector


def electroV_hie(Ocupa, V_hie, perfil):
    '''
    Ventana hierro (V_hie)
    '''

    try:
        if V_hie == []:
            raise
    except:
        print 'V_HIE ERROR'
        vector = VECTOR_NULO
        return vector

    vector = VECTOR_NULO
    return vector


def electroV_mad(Ocupa, V_mad, perfil):
    '''
    Ventana madera (V_mad)
    '''

    try:
        if V_mad == []:
            raise
    except:
        print 'V_MAD ERROR'
        vector = VECTOR_NULO
        return vector

    vector = VECTOR_NULO
    return vector


def electroV_PVC(Ocupa, V_PVC, perfil):
    '''
    Ventana PVC (V_PVC)
    '''

    try:
        if V_PVC == []:
            raise
    except:
        print 'V_PVC ERROR'
        vector = VECTOR_NULO
        return vector

    vector = VECTOR_NULO
    return vector


def electroM2(Ocupa, M2, perfil):
    '''
    Superficie (M2)
    '''

    try:
        if M2 == []:
            raise
    except:
        print 'M2 ERROR'
        vector = VECTOR_NULO
        return vector

    if M2 == 'Menos de 100 m2':
        pass
    elif M2 == 'Igual o más de 100 m2':
        pass

    vector = VECTOR_NULO
    return vector


def electroOrien(Ocupa, Orien, perfil):
    '''
    Orientacion (Orien)
    '''

    try:
        if Orien == []:
            raise
    except:
        print 'ORIEN ERROR'
        vector = VECTOR_NULO
        return vector

    if Orien[1].capitalize() == 'Norte':
        pass
    elif Orien[1].capitalize() == 'Sur':
        pass
    elif Orien[1].capitalize() == 'Este':
        pass
    elif Orien[1].capitalize() == 'Oeste':
        pass
    elif Orien[1].capitalize() == 'Noreste':
        pass
    elif Orien[1].capitalize() == 'Noroeste':
        pass
    elif Orien[1].capitalize() == 'Sureste':
        pass
    elif Orien[1].capitalize() == 'Suroeste':
        pass

    vector = VECTOR_NULO
    return vector


def electroConsumo(Ocupa, Consumo, perfil):
    '''
    Consumo (Consumo)
    '''

    try:
        if Consumo == []:
            raise
    except:
        print 'CONSUMO ERROR'
        vector = VECTOR_NULO
        return vector

    vector = VECTOR_NULO
    return vector


def electroAnyo(Ocupa, Anyo, perfil):
    '''
    Año de construccion (Anyo)
    '''

    try:
        if Anyo == []:
            raise
    except:
        print 'ANYO ERROR'
        vector = VECTOR_NULO
        return vector

    if Anyo == 'Anterior a 1975':
        pass
    elif Anyo == 'Entre 1975 y 2005':
        pass
    elif Anyo == 'Posterior a 2005':
        pass

    vector = VECTOR_NULO
    return vector


def electroVivi(Ocupa, Vivi, perfil):
    '''
    TipoDeVivienda (Vivi)
    '''

    try:
        if Vivi == []:
            raise
    except:
        print 'VIVI ERROR'
        vector = VECTOR_NULO
        return vector

    if Vivi == 'Vivienda unifamiliar':
        pass
    elif Vivi == 'Bloque de viviendas':
        pass

    vector = VECTOR_NULO
    return vector


def electroHabs(Ocupa, Habs, perfil):
    '''
    NumeroDeEstancias (Habs)
    '''

    try:
        if Habs == []:
            raise
    except:
        print 'HABS ERROR'
        vector = VECTOR_NULO
        return vector

    vector = VECTOR_NULO
    return vector


def electroZona(Ocupa, Zona, perfil):
    '''
    ZonaGeografica (Zona)
    '''

    try:
        if Zona == []:
            raise
    except:
        print 'ZONA ERROR'
        vector = VECTOR_NULO
        return vector

    if Zona == 'Oceánica':
        pass
    elif Zona == 'Mediterránea':
        pass
    elif Zona == 'Continental':
        pass

    vector = VECTOR_NULO
    return vector

# from sys import path
# path.append('libs')
# from kernelCaracterizacionEnergetica import inviernoPerfilSimulado
# teste = {"414":{"Ocupa":[1,0,0],"Frigo0":[1,"A+"],"Horno0":[1],"Lava0":[1,"A+"],"Vaji":[1],"Micro":[1],"Placa_3":[1],"Seca0":[1,"A+"],"PC":[1],"TV":[1],"Portatil":[1],"B_bacon0":[5,"26"],"Fluor0":[4,"36"],"AA0":[1],"Zona":[1,"Atlantica"],"V_PVC":[6],"Habs":[1,"3"],"M2":[1,"Menor de 100 m2"],"Orien":[1,"Norte"],"Vivi":[1,"Bloque de viviendas"],"Anyo":[1,"Entre 1975 y 2005"],"Termo0":[1],"Rad0":[1,"1200"]}}
# inviernoConsumoVector = inviernoPerfilSimulado(teste)
def inviernoPerfilSimulado(EnerCat):
    '''
    '''
    vector = VECTOR_NULO
    for userID, catUserID in EnerCat.iteritems():
        try:
            if catUserID['Ocupa'] == []:
                raise
            if catUserID['Ocupa'][0] + catUserID['Ocupa'][1] == 0:
                raise
        except:
            print 'OCUPA ERROR'
            return vector

        perfil = perfilOcupacion(catUserID['Ocupa'])
        tiempos = funcionTiempos(perfil)
        potencias = funcionPotencias(perfil)

        for elemento, propiedades in catUserID.iteritems():
#             estacion = electroEstacion(catUserID['Ocupa'], propiedades, perfil)
            if 'Ocupa' in elemento:
                vector = map(_add, vector, electroIlumiInvierno(catUserID['Ocupa'], propiedades, perfil))
            if 'Placa_3' in elemento:
                electro = 0
                vector = map(_add, vector, electroPlaca_3(catUserID['Ocupa'], propiedades, perfil, electro))
            if 'Placa_4' in elemento:
                electro = 0
                vector = map(_add, vector, electroPlaca_4(catUserID['Ocupa'], propiedades, perfil, electro))
            if 'Vitro_3' in elemento:
                electro = 0
                vector = map(_add, vector, electroVitro_3(catUserID['Ocupa'], propiedades, perfil, electro))
            if 'Vitro_4' in elemento:
                electro = 0
                vector = map(_add, vector, electroVitro_4(catUserID['Ocupa'], propiedades, perfil, electro))
            if 'Horno' in elemento:
                electro = 1
                vector = map(_add, vector, electroHorno(catUserID['Ocupa'], propiedades, perfil, electro))
            if 'Micro' in elemento:
                electro = 2
                vector = map(_add, vector, electroMicro(catUserID['Ocupa'], propiedades, electro))
            if 'Frigo' in elemento:
                electroList = [3,4]
                vector = map(_add, vector, electroFrigo(catUserID['Ocupa'], propiedades, perfil, electroList))
            if 'TV' in elemento:
                electro = 5
                vector = map(_add, vector, electroTV(catUserID['Ocupa'], propiedades, perfil, electro))
            if 'Multi' in elemento:
                electro = 6
                vector = map(_add, vector, electroMulti(catUserID['Ocupa'], propiedades, perfil, electro))
            if 'Vaji' in elemento:
                electro = 7
                vector = map(_add, vector, electroVaji(catUserID['Ocupa'], propiedades, perfil, electro))
            if 'Lava' in elemento:
                electro = 8
                vector = map(_add, vector, electroLava(catUserID['Ocupa'], propiedades, perfil, electro))
            if 'Seca' in elemento:
                electro = 9
                vector = map(_add, vector, electroSeca(catUserID['Ocupa'], propiedades, perfil, electro))
            ''' INVIERNO '''
            if 'Rad' in elemento:
                electro = 10
                vector = map(_add, vector, electroRad(catUserID['Ocupa'], propiedades, perfil, electro))
            if 'PC' in elemento:
                electro = 11
                vector = map(_add, vector, electroPC(catUserID['Ocupa'], propiedades, perfil, electro))
#             if 'Portatil' in elemento:
#                 electro = 11
#                 vector = map(_add, vector, electroPortatil(catUserID['Ocupa'], propiedades, perfil, electro))
            if 'Termo' in elemento:
                electro = 12
                vector = map(_add, vector, electroTermo(catUserID['Ocupa'], propiedades, perfil, electro))
            ''' INVIERNO '''
            if 'AA' in elemento:
                electro = 13
                vector = map(_add, vector, electroAA(catUserID['Ocupa'], propiedades, perfil, electro))
            if 'B_bacon' in elemento:
                vector = map(_add, vector, electroB_bacon(catUserID['Ocupa'], propiedades, perfil))
            if 'B_incand' in elemento:
                vector = map(_add, vector, electroB_incand(catUserID['Ocupa'], propiedades, perfil))
            if 'DL' in elemento:
                vector = map(_add, vector, electroDL(catUserID['Ocupa'], propiedades, perfil))
            if 'Fluor' in elemento:
                vector = map(_add, vector, electroFluor(catUserID['Ocupa'], propiedades, perfil))
            if 'Halo' in elemento:
                vector = map(_add, vector, electroHalo(catUserID['Ocupa'], propiedades, perfil))
            if 'Calefac' in elemento:
                vector = map(_add, vector, electroCalefac(catUserID['Ocupa'], propiedades, perfil))
            if 'Convec' in elemento:
                vector = map(_add, vector, electroConvec(catUserID['Ocupa'], propiedades, perfil))
            if 'V_alu' in elemento:
                vector = map(_add, vector, electroV_alu(catUserID['Ocupa'], propiedades, perfil))
            if 'V_hie' in elemento:
                vector = map(_add, vector, electroV_hie(catUserID['Ocupa'], propiedades, perfil))
            if 'V_mad' in elemento:
                vector = map(_add, vector, electroV_mad(catUserID['Ocupa'], propiedades, perfil))
            if 'V_PVC' in elemento:
                vector = map(_add, vector, electroV_PVC(catUserID['Ocupa'], propiedades, perfil))
            if 'M2' in elemento:
                vector = map(_add, vector, electroM2(catUserID['Ocupa'], propiedades, perfil))
            if 'Orien' in elemento:
                vector = map(_add, vector, electroOrien(catUserID['Ocupa'], propiedades, perfil))
            if 'Consumo' in elemento:
                vector = map(_add, vector, electroConsumo(catUserID['Ocupa'], propiedades, perfil))
            if 'Anyo' in elemento:
                vector = map(_add, vector, electroAnyo(catUserID['Ocupa'], propiedades, perfil))
            if 'Vivi' in elemento:
                vector = map(_add, vector, electroVivi(catUserID['Ocupa'], propiedades, perfil))
            if 'Habs' in elemento:
                vector = map(_add, vector, electroHabs(catUserID['Ocupa'], propiedades, perfil))
            if 'Zona' in elemento:
                vector = map(_add, vector, electroZona(catUserID['Ocupa'], propiedades, perfil))
    vector2 = []
    for energia in vector:
        vector2.append(round(energia, 6))
    return vector2

# from sys import path
# path.append('libs')
# from kernelCaracterizacionEnergetica import veranoPerfilSimulado
# teste = {"414":{"Ocupa":[1,0,0],"Frigo0":[1,"A+"],"Horno0":[1],"Lava0":[1,"A+"],"Vaji":[1],"Micro":[1],"Placa_3":[1],"Seca0":[1,"A+"],"PC":[1],"TV":[1],"Portatil":[1],"B_bacon0":[5,"26"],"Fluor0":[4,"36"],"AA0":[1],"Zona":[1,"Atlantica"],"V_PVC":[6],"Habs":[1,"3"],"M2":[1,"Menor de 100 m2"],"Orien":[1,"Norte"],"Vivi":[1,"Bloque de viviendas"],"Anyo":[1,"Entre 1975 y 2005"],"Termo0":[1],"Rad0":[1,"1200"]}}
# veranoConsumoVector = veranoPerfilSimulado(teste)
def veranoPerfilSimulado(EnerCat):
    '''
    '''
    vector = VECTOR_NULO
    for userID, catUserID in EnerCat.iteritems():
        try:
            if catUserID['Ocupa'] == []:
                raise
            if catUserID['Ocupa'][0] + catUserID['Ocupa'][1] == 0:
                raise
        except:
            print 'OCUPA ERROR'
            return vector

        perfil = perfilOcupacion(catUserID['Ocupa'])
        tiempos = funcionTiempos(perfil)
        potencias = funcionPotencias(perfil)

        for elemento, propiedades in catUserID.iteritems():
#             estacion = electroEstacion(catUserID['Ocupa'], propiedades, perfil)
            if 'Ocupa' in elemento:
                vector = map(_add, vector, electroIlumiVerano(catUserID['Ocupa'], propiedades, perfil))
            if 'Placa_3' in elemento:
                electro = 0
                vector = map(_add, vector, electroPlaca_3(catUserID['Ocupa'], propiedades, perfil, electro))
            if 'Placa_4' in elemento:
                electro = 0
                vector = map(_add, vector, electroPlaca_4(catUserID['Ocupa'], propiedades, perfil, electro))
            if 'Vitro_3' in elemento:
                electro = 0
                vector = map(_add, vector, electroVitro_3(catUserID['Ocupa'], propiedades, perfil, electro))
            if 'Vitro_4' in elemento:
                electro = 0
                vector = map(_add, vector, electroVitro_4(catUserID['Ocupa'], propiedades, perfil, electro))
            if 'Horno' in elemento:
                electro = 1
                vector = map(_add, vector, electroHorno(catUserID['Ocupa'], propiedades, perfil, electro))
            if 'Micro' in elemento:
                electro = 2
                vector = map(_add, vector, electroMicro(catUserID['Ocupa'], propiedades, electro))
            if 'Frigo' in elemento:
                electroList = [3,4]
                vector = map(_add, vector, electroFrigo(catUserID['Ocupa'], propiedades, perfil, electroList))
            if 'TV' in elemento:
                electro = 5
                vector = map(_add, vector, electroTV(catUserID['Ocupa'], propiedades, perfil, electro))
            if 'Multi' in elemento:
                electro = 6
                vector = map(_add, vector, electroMulti(catUserID['Ocupa'], propiedades, perfil, electro))
            if 'Vaji' in elemento:
                electro = 7
                vector = map(_add, vector, electroVaji(catUserID['Ocupa'], propiedades, perfil, electro))
            if 'Lava' in elemento:
                electro = 8
                vector = map(_add, vector, electroLava(catUserID['Ocupa'], propiedades, perfil, electro))
            if 'Seca' in elemento:
                electro = 9
                vector = map(_add, vector, electroSeca(catUserID['Ocupa'], propiedades, perfil, electro))
            ''' VERANO '''
#             if 'Rad' in elemento:
#                 electro = 10
#                 vector = map(_add, vector, electroRad(catUserID['Ocupa'], propiedades, perfil, electro))
            if 'PC' in elemento:
                electro = 11
                vector = map(_add, vector, electroPC(catUserID['Ocupa'], propiedades, perfil, electro))
#             if 'Portatil' in elemento:
#                 electro = 11
#                 vector = map(_add, vector, electroPortatil(catUserID['Ocupa'], propiedades, perfil, electro))
            if 'Termo' in elemento:
                electro = 12
                vector = map(_add, vector, electroTermo(catUserID['Ocupa'], propiedades, perfil, electro))
            ''' VERANO '''
            if 'AA' in elemento:
                electro = 13
                vector = map(_add, vector, electroAA(catUserID['Ocupa'], propiedades, perfil, electro))
            if 'B_bacon' in elemento:
                vector = map(_add, vector, electroB_bacon(catUserID['Ocupa'], propiedades, perfil))
            if 'B_incand' in elemento:
                vector = map(_add, vector, electroB_incand(catUserID['Ocupa'], propiedades, perfil))
            if 'DL' in elemento:
                vector = map(_add, vector, electroDL(catUserID['Ocupa'], propiedades, perfil))
            if 'Fluor' in elemento:
                vector = map(_add, vector, electroFluor(catUserID['Ocupa'], propiedades, perfil))
            if 'Halo' in elemento:
                vector = map(_add, vector, electroHalo(catUserID['Ocupa'], propiedades, perfil))
            if 'Calefac' in elemento:
                vector = map(_add, vector, electroCalefac(catUserID['Ocupa'], propiedades, perfil))
            if 'Convec' in elemento:
                vector = map(_add, vector, electroConvec(catUserID['Ocupa'], propiedades, perfil))
            if 'V_alu' in elemento:
                vector = map(_add, vector, electroV_alu(catUserID['Ocupa'], propiedades, perfil))
            if 'V_hie' in elemento:
                vector = map(_add, vector, electroV_hie(catUserID['Ocupa'], propiedades, perfil))
            if 'V_mad' in elemento:
                vector = map(_add, vector, electroV_mad(catUserID['Ocupa'], propiedades, perfil))
            if 'V_PVC' in elemento:
                vector = map(_add, vector, electroV_PVC(catUserID['Ocupa'], propiedades, perfil))
            if 'M2' in elemento:
                vector = map(_add, vector, electroM2(catUserID['Ocupa'], propiedades, perfil))
            if 'Orien' in elemento:
                vector = map(_add, vector, electroOrien(catUserID['Ocupa'], propiedades, perfil))
            if 'Consumo' in elemento:
                vector = map(_add, vector, electroConsumo(catUserID['Ocupa'], propiedades, perfil))
            if 'Anyo' in elemento:
                vector = map(_add, vector, electroAnyo(catUserID['Ocupa'], propiedades, perfil))
            if 'Vivi' in elemento:
                vector = map(_add, vector, electroVivi(catUserID['Ocupa'], propiedades, perfil))
            if 'Habs' in elemento:
                vector = map(_add, vector, electroHabs(catUserID['Ocupa'], propiedades, perfil))
            if 'Zona' in elemento:
                vector = map(_add, vector, electroZona(catUserID['Ocupa'], propiedades, perfil))
    vector2 = []
    for energia in vector:
        vector2.append(round(energia, 6))
    return vector2

def electroIlumiInvierno(Ocupa, Ilumi, perfil):
    '''
    '''
    consumoHabs = CONSUMOSMEDIOS['cIlumiInvierno'] * vectorPuntosLuz[perfil] / sumarElementosVector(ocurrenciasIluminacion['oInvierno'])
    vector = multiplicarDiccionarioPorNumero(ocurrenciasIluminacion, 'oInvierno', consumoHabs)
    return vector

def electroIlumiVerano(Ocupa, Ilumi, perfil):
    '''
    '''
    consumoHabs = CONSUMOSMEDIOS['cIlumiVerano'] * vectorPuntosLuz[perfil] / sumarElementosVector(ocurrenciasIluminacion['oVerano'])
    vector = multiplicarDiccionarioPorNumero(ocurrenciasIluminacion, 'oVerano', consumoHabs)
    return vector

'''
{
title: 'Perfil Energético',
titleTextStyle:  {color: '#000000', fontName: 'Roboto', fontSize: '20', bold: 'true', italic: 'true'},
width: '800', 
height: '400',
vAxis: {title:'kWh', textStyle:{color:'#000000', fontName: 'Roboto', fontSize: '16', bold: 'true', italic: 'false'}, titleTextStyle:{color:'#8253E8', fontName: 'Roboto', fontSize: '16', bold: 'true', italic: 'false'}, viewWindow: {min: '0'}}, 
hAxis: {title:'HORA', textStyle:{color:'#000000', fontName: 'Roboto', fontSize: '16', bold: 'true', italic: 'false'}, titleTextStyle:{color:'#8253E8', fontName: 'Roboto', fontSize: '16', bold: 'true', italic: 'false'}, viewWindowMode:'pretty'},
curveType: 'function',
//colors: ['#8253E8'],
backgroundColor: {stroke: '#000000', strokeWidth: '4', /*fill: '#D1FFC6'*/},
}
'''

# from sys import path
# path.append('libs')
# teste = {"414":{"Ocupa":[1,0,0],"Frigo0":[1,"A+"],"Horno0":[1],"Lava0":[1,"A+"],"Vaji":[1],"Micro":[1],"Placa_3":[1],"Seca0":[1,"A+"],"PC":[1],"TV":[1],"Portatil":[1],"B_bacon0":[5,"26"],"Fluor0":[4,"36"],"AA0":[1],"Zona":[1,"Atlantica"],"V_PVC":[6],"Habs":[1,"3"],"M2":[1,"Menor de 100 m2"],"Orien":[1,"Norte"],"Vivi":[1,"Bloque de viviendas"],"Anyo":[1,"Entre 1975 y 2005"],"Termo0":[1],"Rad0":[1,"1200"]}}
# from kernelCaracterizacionEnergetica import funcion
# temporadaConsumoVector(teste)
def temporadaConsumoVector(teste):
    '''
    '''
    horasenundia = 24
    lista = list()
    etiquetasVector = ['Hora','Invierno','Verano']
    horasDiaVector = list()
    for hora in range(horasenundia):
        horasDiaVector.append(hora)
    inviernoConsumoVector = inviernoPerfilSimulado(teste)
    veranoConsumoVector = veranoPerfilSimulado(teste)
#     print etiquetasVector
#     print horasDiaVector
#     print inviernoConsumoVector
#     print veranoConsumoVector
    lista.append(etiquetasVector)
    for indice in horasDiaVector:
        lista.append([ horasDiaVector[indice], inviernoConsumoVector[indice], veranoConsumoVector[indice] ])
#     print lista
    return lista
